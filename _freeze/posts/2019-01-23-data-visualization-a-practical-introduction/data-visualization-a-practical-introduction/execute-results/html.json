{
  "hash": "6daaa7e1927824ea56429a33f1c2201a",
  "result": {
    "markdown": "---\ntitle: \"Data visualisatie. Een practische introductie\"\ndescription: |\n    Naar aanleiding van het nieuwe boek van Kieran Healey. Data visualization/A Practical Introduction.\nauthor: \"Harrie Jonkman\"\ndate: \"01-23-2019\"\ncategories: [analyse]\nimage: \"Screenshot.png\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gapminder)\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'here' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nhere() starts at C:/FilesHarrie/HHQuarto\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyverse' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching packages --------------------------------------- tidyverse 1.3.1 --\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nv ggplot2 3.3.6     v purrr   0.3.4\nv tibble  3.1.7     v dplyr   1.0.9\nv tidyr   1.2.0     v stringr 1.4.1\nv readr   2.1.2     v forcats 0.5.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tibble' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(socviz)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'socviz' was built under R version 4.1.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggrepel)\n```\n:::\n\n\n\nIn 2014 schreeft Kieran Healey samen met James Moody in de **'Annual Review of Sociology'** (2014. 40: 105-28) een artikel over datavisualisatie in de sociologie. Visualiseren van data verdient meer aandacht in de sociale wetenschappen. Ondanks dat er in de beginjaren van de sociologie hier de nodige aandacht voor was, zijn de gereedschappen om dit goed te maken achtergebleven. Mensen als Du Bois, ge√Ønspireerd door expressieve schilderkunst, deden dat op een geweldige manier. Vele jaren later waren er ook mensen als Cleveland en, vooral, Tufte die hier baanbrekend werk hebben verricht. Zij lieten vooral zien hoe de visualisatie eruit zou moeten zien en hadden weer minder aandacht voor hoe het zou doen en wat daarvoor nodig is. Methodes en gereedschappen ontbraken lange tijd. In deze tijd van delen van codes en data delen is er veel meer mogelijk. Onderzoekers en publicisten kunnen nu een stap voorwaarts zetten.    \nSinds dat artikel heeft Kieran Healey niet stil gezeten. Vijf jaar lang hield hij zich bezig met datavisualisatie en publiceerde hier regelmatig over en hield de ene na de andere workshop. Ikzelf hield hem de afgelopen twee jaar nauwlettend in het oog omdat ik grote waardering voor zijn werk heb. Recent verscheen zijn nieuwe boek **'Data visualization. A practical introduction'** (Princeton and Oxford: Princeton University Press, 2019). De tekst heb ik letterlijk op internet zien ontstaan in bookdown-vorm. Het boek heb ik deze maand ontvangen. Het is een 'must' voor mensen die willen leren hoe je data visualiseert maar ook voor mensen die willen leren hoe je op een moderne manier met data omgaat. Een prachtig boek, ik kan dat niet voldoende benadrukken.\n\n\nIn het eerste hoofdstuk (*Look at Data*) kijkt Kieran Healy met ons naar data. Visualisaties zijn, volgens hem, bedoeld om naar te kijken en daarom moet je ook weten wie er naar kijkt en waarom. Visualiseren is een goede manier om data nader te onderzoeken, te begrijpen en samenhang in de data te kunnen verklaren. Figuren kunnen slecht gemaakt worden, bijvoorbeeld vanwege een slechte smaak of omdat iets niet goed te lezen is. Aan een slecht figuur kunnen ook slechte data ten grondslag liggen. Tot slot kan de grafiek je ook misleiden en kan er een gat zitten tussen de data en de esthetica. Perceptie.   \nVervolgens legt hij ons in het tweede hoofdstuk (*Get Started*) uit hoe we grafiek gaan maken. Healey werkt met R en het pakket `ggplot2` waar hij in het hele boek mee werkt. Hij laat zien hoe je met R en zijn bedieningspaneel RStudio moet werken, hoe je met `RMarkdown` kunt werken en hoe je een project start. Vervolgens legt hij een aantal basiszaken van R uit die je ook kunt overslaan als je deze kennis al hebt. Maar Healey is heel scherp en duidelijk en een hele goede leermeester, volgens mij, voor mensen die er weinig van weten. Maar dat is hij ook voor mensen die al meer weten en vervolgens laat hij aan het einde van het hoofdstuk de eerste, zeer eenvoudige figuur zien van de samenhang tussen wat mensen verdienen en de levensduur in de wereld.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 x 6\n   country     continent  year lifeExp      pop gdpPercap\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ... with 1,694 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(data = gapminder,\n            mapping = aes(x = gdpPercap, y = lifeExp))\np + geom_point()\n```\n\n::: {.cell-output-display}\n![Life expectancy plotted against GDP per capita for a large number of country-years.](data-visualization-a-practical-introduction_files/figure-html/01-first_plot-1.png){width=960}\n:::\n:::\n\n\n\nIn hoofdstuk 3 (*Make a Plot*) gaat hij veel uitgebreider in op hoe we een figuur maken. Belangrijk is steeds dat data heel netjes zijn opgebouwd. Als dat het geval is werkt het grafiekenprogramma `ggplot2` goed. Niets voor niets is het onderdeel van het `tidyverse`-pakket. `ggplot2` is laagsgewijs opgebouwd waarbij je steeds een aantal stappen achter elkaar moet zetten:   \n1. Je vertelt ggplot()functie eerst over welke data we het hebben.   \n2. Dan vertel je ggplot() welke relaties je wilt zien.   \n3. Vervolgens vertel je ggplot() *hoe* je de relaties wilt zien.   \n4. Voeg er dan nog een laag aan toe (geom) als dat nodig is en voeg die toe aan p, waar Healey de hele tijd mee werkt.   \n5. Tot slot gebruik je, eventueel, nog enkele schalen, labels, titels en dergelijk. En die voeg je er aan het einde aan toe.    \n\nJe krijgt dan zo'n commando met zo'n resultaat:\n\n\n::: {.cell layout=\"l-page\"}\n\n```{.r .cell-code}\np <- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y=lifeExp))\np + geom_point(alpha = 0.3) + geom_smooth(method = \"gam\") +\n    scale_x_log10(labels = scales::dollar) +\n    labs(x = \"GDP Per Capita\", y = \"Life Expectancy in Years\",\n         title = \"Economic Growth and Life Expectancy\",\n         subtitle = \"Data points are country-years\",\n         caption = \"Source: Gapminder.\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![A more polished plot of Life Expectancy vs GDP.](data-visualization-a-practical-introduction_files/figure-html/02-make-a-plot-15-1.png){width=576}\n:::\n:::\n\n\nIn het vierde hoofdstuk (*Show the Right Numbers*) gaat hij verder met het uitleggen van `ggplot` en allerlei andere zaken die er mee kunt doen. In dit hoofdstuk laat hij bijvoorbeeld zien hoe je een aantal figuren naast elkaar kunt zetten.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(data = gapminder,\n            mapping = aes(x = year,\n                          y = gdpPercap))\n\np + geom_line(mapping =  \n              aes(group = country)) + \nfacet_wrap(~ continent)      \n```\n\n::: {.cell-output-display}\n![](data-visualization-a-practical-introduction_files/figure-html/03-facet_1-1.png){width=672}\n:::\n:::\n\n::: {.cell layout=\"l-page\"}\n\n```{.r .cell-code}\np + geom_line(color=\"gray70\",\n              mapping=aes(group = country)) +\n    geom_smooth(size = 1.1,\n                method = \"loess\",\n                se = FALSE) +\n    scale_y_log10(labels=scales::dollar) +\n    facet_wrap(~ continent, ncol = 5) +\n    labs(x = \"Year\",\n         y = \"log GDP per capita\",\n         title = \"GDP per capita on Five Continents\")      \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](data-visualization-a-practical-introduction_files/figure-html/04-facet_polished-1.png){width=1152}\n:::\n:::\n\n\nEn Healey laat hele andere figuren zien, zoals hieronder, waar hij positieve en negeatieve verschillen laat zien tussen de USA en de OECD-landen.\n\n\n::: {.cell layout=\"l-page\"}\n\n```{.r .cell-code}\np <- ggplot(data = oecd_sum,\n            mapping = aes(x = year, y = diff, fill = hi_lo))\np + geom_col() + guides(fill = FALSE) +\n  labs(x = NULL, y = \"Difference in Years\",\n       title = \"The US Life Expectancy Gap\",\n       subtitle = \"Difference between US and OECD\n                   average life expectancies, 1960-2015\",\n       caption = \"Data: OECD. After a chart by Christopher Ingraham,\n                  Washington Post, December 27th 2017.\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> =\n\"none\")` instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 rows containing missing values (position_stack).\n```\n:::\n\n::: {.cell-output-display}\n![](data-visualization-a-practical-introduction_files/figure-html/05-lifegap_2-1.png){width=864}\n:::\n:::\n\n\nIn het vijfde hoofdstuk (*Graph Tables, Add Labels, Make Notes*) gaat hij verder met het maken van een figuur, maar hij laat dan veel meer mogelijkheden zien. Het `ggplot2`-pakket is, zoals gezegd, onderdeel van Wickhams `tidyverse`-pakket dat je in staat stelt de data op een eenvoudige en logische manier aan te passen, hier dus voordat je de grafiek maakt. \n\nEerst pas je de dataset aan:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrel_by_region <- gss_sm %>%\n    group_by(bigregion, religion) %>%\n    summarize(N = n()) %>%\n    mutate(freq = N / sum(N),\n           pct = round((freq*100), 0))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'bigregion'. You can override using the\n`.groups` argument.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrel_by_region %>% group_by(bigregion) %>%\n    summarize(total = sum(pct))      \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 2\n  bigregion total\n  <fct>     <dbl>\n1 Northeast   100\n2 Midwest     101\n3 South       100\n4 West        101\n```\n:::\n:::\n\n\nVervolgens maak je de grafiek en zet je preferenties van religie naast elkaar.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## dodge2 presently requires the development version of ggplot\n## devtools::install_github(\"tidyverse/ggplot2\")\n\np <- ggplot(rel_by_region, aes(x = bigregion, y = pct, fill = religion))\np + geom_col(position = \"dodge2\") +\n    labs(x = \"Region\",y = \"Percent\", fill = \"Religion\") +\n    theme(legend.position = \"top\")      \n```\n\n::: {.cell-output-display}\n![](data-visualization-a-practical-introduction_files/figure-html/07-dodge2-1.png){width=672}\n:::\n:::\n\n\nEn dan verdeel je het duidelijk per regio en trek je die regio's uit elkaar.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(rel_by_region, aes(x = religion, y = pct, fill = religion))\np + geom_col(position = \"dodge2\") +\n    labs(x = NULL, y = \"Percent\", fill = \"Religion\") +\n    guides(fill = FALSE) + \n    coord_flip() + \n    facet_grid(~ bigregion)      \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> =\n\"none\")` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](data-visualization-a-practical-introduction_files/figure-html/08-facet_dodge-1.png){width=672}\n:::\n:::\n\n\n\nIn dit hoofdstuk laat hij ook nog enkele aanvullingen zien waarmee je kunt werken. Je kunt er een tekst inzetten.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(data = organdata, mapping = aes(x = roads, y = donors))\np + geom_point() + annotate(geom = \"text\", x = 91, y = 33,\n                            label = \"A surprisingly high \\n recovery rate.\",\n                            hjust = 0)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 34 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](data-visualization-a-practical-introduction_files/figure-html/09-tables-and-labels-22-1.png){width=672}\n:::\n:::\n\n\nOf een tekst en een blok om iets extra's aan te geven.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(data = organdata,\n            mapping = aes(x = roads, y = donors))\np + geom_point() +\n    annotate(geom = \"rect\", xmin = 125, xmax = 155,\n             ymin = 30, ymax = 35, fill = \"red\", alpha = 0.2) + \n    annotate(geom = \"text\", x = 157, y = 33,\n             label = \"A surprisingly high \\n recovery rate.\", hjust = 0)      \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 34 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](data-visualization-a-practical-introduction_files/figure-html/10-tables-and-labels-23-1.png){width=672}\n:::\n:::\n\n\n\nHij geeft ook aan hoe je de labels eraan zet.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(data = organdata,\n            mapping = aes(x = roads,\n                          y = donors,\n                          color = world))\np + geom_point() +\n    scale_x_log10() +\n    scale_y_continuous(breaks = c(5, 15, 25),\n                       labels = c(\"Five\", \"Fifteen\", \"Twenty Five\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 34 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](data-visualization-a-practical-introduction_files/figure-html/11-tables-and-labels-25-1.png){width=672}\n:::\n:::\n\n\n\nWanneer je het maken van een grafiek en wat daarbij komt kijken onder de knie hebt, gaat hij in de twee volgende hoofdstukken in op specieke onderwerpen. Modelleren is een belangrijk onderdeel van omgaan met data. Ook modellen kun je visualiseren en dat werken met modellen is voor hem het onderwerp van het zesde hoofdstuk (*Work with Models*).  Hieronder zie je bijvoorbeeld drie statistische modellen netjes op een rij gezet:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_colors <- RColorBrewer::brewer.pal(3, \"Set1\")\nmodel_colors\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"#E41A1C\" \"#377EB8\" \"#4DAF4A\"\n```\n:::\n\n```{.r .cell-code}\np0 <- ggplot(data = gapminder,\n            mapping = aes(x = log(gdpPercap), y = lifeExp))\n\np1 <- p0 + geom_point(alpha = 0.2) +\n    geom_smooth(method = \"lm\", aes(color = \"OLS\", fill = \"OLS\")) +\n    geom_smooth(method = \"lm\", formula = y ~ splines::bs(x, df = 3),\n                aes(color = \"Cubic Spline\", fill = \"Cubic Spline\")) +\n    geom_smooth(method = \"loess\",\n                aes(color = \"LOESS\", fill = \"LOESS\"))\n\n\np1 + scale_color_manual(name = \"Models\", values = model_colors) +\n    scale_fill_manual(name = \"Models\", values = model_colors) +\n    theme(legend.position = \"top\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula 'y ~ x'\n`geom_smooth()` using formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](data-visualization-a-practical-introduction_files/figure-html/12-severalfits-1.png){width=672}\n:::\n:::\n\n\n\n`broom` is een R-pakket waar je op een goede en eenvoudige manier mee kunt modelleren. Hiermee krijg je schattingen en intervallen, maar die kun je ook weer visualiseren. Hoe je dat doet, zie je hieronder.\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\ntibble [1,704 x 6] (S3: tbl_df/tbl/data.frame)\n$ country : Factor w/ 142 levels \"Afghanistan\",..: 1 1 ...\n$ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 ...\n$ year : int [1:1704] 1952 1957 ...\n$ lifeExp : num [1:1704] 28.8 ...\n$ pop : int [1:1704] 8425333 9240934 ...\n$ gdpPercap: num [1:1704] 779 ...\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nout <- lm(formula = lifeExp ~ gdpPercap + pop + continent,\n          data = gapminder)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(out)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = lifeExp ~ gdpPercap + pop + continent, data = gapminder)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-49.161  -4.486   0.297   5.110  25.175 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(>|t|)    \n(Intercept)       4.781e+01  3.395e-01 140.819  < 2e-16 ***\ngdpPercap         4.495e-04  2.346e-05  19.158  < 2e-16 ***\npop               6.570e-09  1.975e-09   3.326 0.000901 ***\ncontinentAmericas 1.348e+01  6.000e-01  22.458  < 2e-16 ***\ncontinentAsia     8.193e+00  5.712e-01  14.342  < 2e-16 ***\ncontinentEurope   1.747e+01  6.246e-01  27.973  < 2e-16 ***\ncontinentOceania  1.808e+01  1.782e+00  10.146  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.365 on 1697 degrees of freedom\nMultiple R-squared:  0.5821,\tAdjusted R-squared:  0.5806 \nF-statistic: 393.9 on 6 and 1697 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(broom)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'broom' was built under R version 4.1.3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nout_comp <- tidy(out)\nout_comp %>% round_df()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 x 5\n  term              estimate std.error statistic p.value\n  <chr>                <dbl>     <dbl>     <dbl>   <dbl>\n1 (Intercept)          47.8       0.34    141.         0\n2 gdpPercap             0         0        19.2        0\n3 pop                   0         0         3.33       0\n4 continentAmericas    13.5       0.6      22.5        0\n5 continentAsia         8.19      0.57     14.3        0\n6 continentEurope      17.5       0.62     28.0        0\n7 continentOceania     18.1       1.78     10.2        0\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(out_comp, mapping = aes(x = term,\n                                    y = estimate))\n\np + geom_point() + coord_flip() \n```\n\n::: {.cell-output-display}\n![](data-visualization-a-practical-introduction_files/figure-html/06-models-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nout_conf <- tidy(out, conf.int = TRUE)\nout_conf %>% round_df()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 x 7\n  term              estimate std.error statistic p.value conf.low conf.high\n  <chr>                <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl>\n1 (Intercept)          47.8       0.34    141.         0    47.2      48.5 \n2 gdpPercap             0         0        19.2        0     0         0   \n3 pop                   0         0         3.33       0     0         0   \n4 continentAmericas    13.5       0.6      22.5        0    12.3      14.6 \n5 continentAsia         8.19      0.57     14.3        0     7.07      9.31\n6 continentEurope      17.5       0.62     28.0        0    16.2      18.7 \n7 continentOceania     18.1       1.78     10.2        0    14.6      21.6 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nout_conf <- subset(out_conf, term %nin% \"(Intercept)\")\nout_conf$nicelabs <- prefix_strip(out_conf$term, \"continent\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(out_conf, mapping = aes(x = reorder(nicelabs, estimate),\n                                    y = estimate, ymin = conf.low, ymax = conf.high))\np + geom_pointrange() + coord_flip() + labs(x=\"\", y=\"OLS Estimate\")\n```\n\n::: {.cell-output-display}\n![](data-visualization-a-practical-introduction_files/figure-html/06-models-13-1.png){width=672}\n:::\n:::\n\n\nLanden van Europa, provincies van Nederland of steden van een provincie kun je goed visualiseren. Soms kun je gegevens van die landen, provincies of steden ook goed zichtbaar maken. Dat kan ook met `ggplot2` en daarover schrijft Healey in hoofdstuk 7 (*Draw maps*). Hieronder zie je bijvoorbeeld het percentage 'black Americans' per countie afgebeeld.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(maps)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'maps'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:purrr':\n\n    map\n```\n:::\n\n```{.r .cell-code}\nus_states <- map_data(\"state\")\nhead(us_states)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       long      lat group order  region subregion\n1 -87.46201 30.38968     1     1 alabama      <NA>\n2 -87.48493 30.37249     1     2 alabama      <NA>\n3 -87.52503 30.37249     1     3 alabama      <NA>\n4 -87.53076 30.33239     1     4 alabama      <NA>\n5 -87.57087 30.32665     1     5 alabama      <NA>\n6 -87.58806 30.32665     1     6 alabama      <NA>\n```\n:::\n\n```{.r .cell-code}\ndim(us_states)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15537     6\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nelection$region <- tolower(election$state)\nus_states_elec <- left_join(us_states, election)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"region\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(data = us_states_elec,\n            aes(x = long, y = lat,\n                group = group, fill = party))\n\np + geom_polygon(color = \"gray90\", size = 0.1) +\n    coord_map(projection = \"albers\", lat0 = 39, lat1 = 45) \n```\n\n::: {.cell-output-display}\n![Mapping the results](data-visualization-a-practical-introduction_files/figure-html/07-maps-8-1.png){width=100%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_map <- function(base_size=9, base_family=\"\") {\n    require(grid)\n    theme_bw(base_size=base_size, base_family=base_family) %+replace%\n        theme(axis.line=element_blank(),\n              axis.text=element_blank(),\n              axis.ticks=element_blank(),\n              axis.title=element_blank(),\n              panel.background=element_blank(),\n              panel.border=element_blank(),\n              panel.grid=element_blank(),\n              panel.spacing=unit(0, \"lines\"),\n              plot.background=element_blank(),\n              legend.justification = c(0,0),\n              legend.position = c(0,0)\n              )\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nparty_colors <- c(\"#2E74C0\", \"#CB454A\") \n\np0 <- ggplot(data = us_states_elec,\n             mapping = aes(x = long, y = lat,\n                           group = group, fill = party))\np1 <- p0 + geom_polygon(color = \"gray90\", size = 0.1) +\n    coord_map(projection = \"albers\", lat0 = 39, lat1 = 45) \np2 <- p1 + scale_fill_manual(values = party_colors) +\n    labs(title = \"Election Results 2016\", fill = NULL)\np2 + theme_map() \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: grid\n```\n:::\n\n::: {.cell-output-display}\n![Election 2016 by State](data-visualization-a-practical-introduction_files/figure-html/ch-07-firstmap-05-1.png){width=768}\n:::\n:::\n\n\n\nOp het verfijnen van de figuren gaat Healey in het laatste en achtste hoofdstuk (*Refine Your Plots*) in. Dat komt natuurlijk vooral in de laatste fase van het maken van figuren aan de orde wanneer de figuren klaar moeten worden gemaakt om gepubliceerd te worden of als je een speciale aanpassing in je hoofd hebt. Hier bespreekt hij kleurengebruik en gaat hij in op het gebruik van een bepaald thema (zeg je wilt de figuur in de stijl van de Economist hebben) of wanneer je een van een slecht figuur een goed figuur wilt maken, zoals hieronder:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(data = yahoo,\n            mapping = aes(x = Employees, y = Revenue))\np + geom_path(color = \"gray80\") +\n    geom_text(aes(color = Mayer, label = Year),\n              size = 3, fontface = \"bold\") +\n    theme(legend.position = \"bottom\") +\n    labs(color = \"Mayer is CEO\",\n         x = \"Employees\", y = \"Revenue (Millions)\",\n         title = \"Yahoo Employees vs Revenues, 2004-2014\") +\n    scale_y_continuous(labels = scales::dollar) +\n    scale_x_continuous(labels = scales::comma)\n```\n\n::: {.cell-output-display}\n![Redrawing as a connected scatterplot.](data-visualization-a-practical-introduction_files/figure-html/yahoo-02-1.png){width=480}\n:::\n:::\n\n\n\nEn dan hier de betere figuur:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(data = yahoo,\n            mapping = aes(x = Year, y = Revenue/Employees))\n\np + geom_vline(xintercept = 2012) +\n    geom_line(color = \"gray60\", size = 2) +\n    annotate(\"text\", x = 2013, y = 0.44,\n             label = \" Mayer becomes CEO\", size = 2.5) +\n    labs(x = \"Year\\n\",\n         y = \"Revenue/Employees\",\n         title = \"Yahoo Revenue to Employee Ratio, 2004-2014\")\n```\n\n::: {.cell-output-display}\n![Plotting the ratio of revenue to employees against time.](data-visualization-a-practical-introduction_files/figure-html/yahoo-03-1.png){width=576}\n:::\n:::\n\n\n\nHealey's boek is een prachtig boek. Niet alleen omdat hij ons goed naar figuren laat kijken en ons leert hoe je die moet maken. Met *Data Visualization* leert hij ons hoe je op een moderne manier met data om kunt gaan: elegant, logisch en coherent. Naast zijn boek heeft hij een groot aantal codes geschreven en beschikbaar gesteld voor vrij gebruik (zie zijn website: https://kieranhealy.org/ of zijn codes op github: https://github.com/kjhealy). Hij laat je heel goed zien hoe hij alles heeft gemaakt en het klopt allemaal. Zijn boek zal ik blijven lezen en zijn werk zal ik blijven volgen. Mijn petje af Kieran, en heel hartelijke dank voor al die dingen die je gedaan hebt en met anderen deelt. Mij heb in in ieder geval ge√Ønspireerd om er een cursus rondom op te bouwen. Binnenkort volgt hier de link van de cursus. Binnenkort staat hier ook de link naar de code van dit document (.rmd). \n",
    "supporting": [
      "data-visualization-a-practical-introduction_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}