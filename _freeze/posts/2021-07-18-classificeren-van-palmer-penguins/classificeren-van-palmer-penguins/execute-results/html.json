{
  "hash": "3c5662e131388441a243c138875b0274",
  "result": {
    "markdown": "---\ntitle: \"Classificeren van Palmer penguins\"\ndescription: |\n     De laatste tijd heeft Julia Silge een aantal videoopnamen gemaakt die laten zien hoe het `tidymodels` raamwerk is te gebruiken.Het zijn opnamen over de eerste stappen in het modelleren tot hoe complexe modellen zijn te evalueren. Deze videoopname is goed voor mensen die net beginnen met `tidymodels`. Ze maakt daarbij gebruik van een #TidyTuesday dataset over pinguïns. Hier gaat het om classificeren. \nauthor: \"Julia Silge, bewerking Harrie Jonkman\" \ndate: \"07-18-2021\"\nimage: \"Screenshot.PNG\"\ncategories: [analyse]\n\n---\n\n\n## Palmer penguins classificatie\n\nHier kun je overigen haar opnmame vinden. [Julia Silge on youtube](https://www.youtube.com/watch?v=z57i2GVcdww&t=1235s)\n\nDe laatste tijd heeft Julia Silge een aantal videoopnamen gemaakt die laten zien hoe het `tidymodels` raamwerk is te gebruiken.Het zijn opnamen over de eerste stappen in het modelleren tot hoe complexe modellen zijn te evalueren. Deze videoopname is goed voor mensen die net beginnen met `tidymodels`. Ze maakt daarbij gebruik van een #TidyTuesday dataset over pinguïns. Hier gaat het om classificeren.\n\nHier kun je haar opnmame vinden.\n[Julia Silge on youtube](https://www.youtube.com/watch?v=z57i2GVcdww&t=1235s)\n\nEerst maar eens enkele pakketten laden en het databestand openen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyverse' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching packages --------------------------------------- tidyverse 1.3.1 --\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nv ggplot2 3.3.6     v purrr   0.3.4\nv tibble  3.1.7     v dplyr   1.0.9\nv tidyr   1.2.0     v stringr 1.4.1\nv readr   2.1.2     v forcats 0.5.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tibble' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'palmerpenguins' was built under R version 4.1.3\n```\n:::\n\n```{.r .cell-code}\npenguins\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 x 8\n   species island    bill_length_mm bill_depth_mm flipper_~1 body_~2 sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema~  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema~  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema~  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema~  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# ... with 334 more rows, and abbreviated variable names 1: flipper_length_mm,\n#   2: body_mass_g\n```\n:::\n:::\n\n\nAls je een classificatiemodel voor soorten pinquins probeert op te stellen, zul je waarschijnlijk een bijna perfecte pasvorm vinden, omdat dit soort waarnemingen in feite de verschillende soorten onderscheiden. `sex` (geslacht) daarentegen geeft een wat rommeliger beeld, vandaar dat hier deze uitkomstvariabelen op basis van predictoren wordt voorspeld.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  filter(!is.na(sex)) %>%\n  ggplot(aes(flipper_length_mm, bill_length_mm, color = sex, size = body_mass_g)) +\n  geom_point(alpha = 0.5) +\n  facet_wrap(~species)\n```\n\n::: {.cell-output-display}\n![](classificeren-van-palmer-penguins_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\nHet ziet er naar uit dat de vrouwelijke pinguïnflippers kleiner zijn met kleinere snavels, maar laten we ons klaarmaken voor het modelleren om meer te weten te komen! De informatie over het eiland of het jaar zullen we niet gebruiken in ons model. Die halen we eruit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_df <- penguins %>%\n  filter(!is.na(sex)) %>%\n  select(-year, -island)\n```\n:::\n\n\n### Een modelopbouwen\nWe zullen ook het `tidymodels` metapakket laden en vervolgens onze gegevens splitsen in een trainings- en testingssets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidymodels' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching packages -------------------------------------- tidymodels 0.2.0 --\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nv broom        0.8.0     v rsample      0.1.1\nv dials        1.0.0     v tune         0.2.0\nv infer        1.0.2     v workflows    0.2.6\nv modeldata    0.1.1     v workflowsets 0.2.1\nv parsnip      1.0.0     v yardstick    1.0.0\nv recipes      0.2.0     \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'broom' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dials' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'scales' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'infer' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'parsnip' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'recipes' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tune' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'workflows' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'workflowsets' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'yardstick' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Conflicts ----------------------------------------- tidymodels_conflicts() --\nx scales::discard() masks purrr::discard()\nx dplyr::filter()   masks stats::filter()\nx recipes::fixed()  masks stringr::fixed()\nx dplyr::lag()      masks stats::lag()\nx yardstick::spec() masks readr::spec()\nx recipes::step()   masks stats::step()\n* Learn how to get started at https://www.tidymodels.org/start/\n```\n:::\n\n```{.r .cell-code}\nset.seed(123)\npenguin_split <- initial_split(penguins_df, strata = sex)\npenguin_train <- training(penguin_split)\npenguin_test <- testing(penguin_split)\n```\n:::\n\n\nOmdat het een relatieve kleine dataset betreft (zeker de testset), maken we vervolgens hier gebruik van bootstrap-resamples van de trainingsgegevens, om onze modellen te evalueren.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\npenguin_boot <- bootstraps(penguin_train)\npenguin_boot\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Bootstrap sampling \n# A tibble: 25 x 2\n   splits           id         \n   <list>           <chr>      \n 1 <split [249/93]> Bootstrap01\n 2 <split [249/91]> Bootstrap02\n 3 <split [249/90]> Bootstrap03\n 4 <split [249/91]> Bootstrap04\n 5 <split [249/85]> Bootstrap05\n 6 <split [249/87]> Bootstrap06\n 7 <split [249/94]> Bootstrap07\n 8 <split [249/88]> Bootstrap08\n 9 <split [249/95]> Bootstrap09\n10 <split [249/89]> Bootstrap10\n# ... with 15 more rows\n```\n:::\n:::\n\n\nLaten we eens twee verschillende modellen vergelijken, een logistisch regressiemodel en een random forest model. We beginnen met het maken van de modelspecificaties voor beide modellen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglm_spec <- logistic_reg() %>%\n  set_engine(\"glm\")\n\nglm_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_spec <- rand_forest() %>%\n  set_mode(\"classification\") %>%\n  set_engine(\"ranger\")\n\nrf_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRandom Forest Model Specification (classification)\n\nComputational engine: ranger \n```\n:::\n:::\n\n\nLaten we nu beginnen met het samenstellen van een `tidymodels workflow()`, een object dat helpt om modelleer-pijplijnen te beheren met stukjes die in elkaar passen als Lego-blokjes. Merk op dat er nog geen model is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_wf <- workflow() %>%\n  add_formula(sex ~ .)\n\npenguin_wf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n== Workflow ====================================================================\nPreprocessor: Formula\nModel: None\n\n-- Preprocessor ----------------------------------------------------------------\nsex ~ .\n```\n:::\n:::\n\n\nNu kunnen we een model toevoegen, en de fit voor elk van de resamples. Eerst kunnen we het logistische regressiemodel passen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglm_rs <- penguin_wf %>%\n  add_model(glm_spec) %>%\n  fit_resamples(\n    resamples = penguin_boot,\n    control = control_resamples(save_pred = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n! Bootstrap05: preprocessor 1/1, model 1/1: glm.fit: fitted probabilities numerically 0...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Bootstrap08: preprocessor 1/1, model 1/1: glm.fit: fitted probabilities numerically 0...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Bootstrap23: preprocessor 1/1, model 1/1: glm.fit: fitted probabilities numerically 0...\n```\n:::\n\n```{.r .cell-code}\nglm_rs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Resampling results\n# Bootstrap sampling \n# A tibble: 25 x 5\n   splits           id          .metrics         .notes           .predictions\n   <list>           <chr>       <list>           <list>           <list>      \n 1 <split [249/93]> Bootstrap01 <tibble [2 x 4]> <tibble [0 x 3]> <tibble>    \n 2 <split [249/91]> Bootstrap02 <tibble [2 x 4]> <tibble [0 x 3]> <tibble>    \n 3 <split [249/90]> Bootstrap03 <tibble [2 x 4]> <tibble [0 x 3]> <tibble>    \n 4 <split [249/91]> Bootstrap04 <tibble [2 x 4]> <tibble [0 x 3]> <tibble>    \n 5 <split [249/85]> Bootstrap05 <tibble [2 x 4]> <tibble [1 x 3]> <tibble>    \n 6 <split [249/87]> Bootstrap06 <tibble [2 x 4]> <tibble [0 x 3]> <tibble>    \n 7 <split [249/94]> Bootstrap07 <tibble [2 x 4]> <tibble [0 x 3]> <tibble>    \n 8 <split [249/88]> Bootstrap08 <tibble [2 x 4]> <tibble [1 x 3]> <tibble>    \n 9 <split [249/95]> Bootstrap09 <tibble [2 x 4]> <tibble [0 x 3]> <tibble>    \n10 <split [249/89]> Bootstrap10 <tibble [2 x 4]> <tibble [0 x 3]> <tibble>    \n# ... with 15 more rows\n\nThere were issues with some computations:\n\n  - Warning(s) x3: glm.fit: fitted probabilities numerically 0 or 1 occurred\n\nUse `collect_notes(object)` for more information.\n```\n:::\n:::\n\n\n\nTen tweede kunnen we het random forest model toepassen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_rs <- penguin_wf %>%\n  add_model(rf_spec) %>%\n  fit_resamples(\n    resamples = penguin_boot,\n    control = control_resamples(save_pred = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ranger' was built under R version 4.1.3\n```\n:::\n\n```{.r .cell-code}\nrf_rs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Resampling results\n# Bootstrap sampling \n# A tibble: 25 x 5\n   splits           id          .metrics         .notes           .predictions\n   <list>           <chr>       <list>           <list>           <list>      \n 1 <split [249/93]> Bootstrap01 <tibble [2 x 4]> <tibble [0 x 3]> <tibble>    \n 2 <split [249/91]> Bootstrap02 <tibble [2 x 4]> <tibble [0 x 3]> <tibble>    \n 3 <split [249/90]> Bootstrap03 <tibble [2 x 4]> <tibble [0 x 3]> <tibble>    \n 4 <split [249/91]> Bootstrap04 <tibble [2 x 4]> <tibble [0 x 3]> <tibble>    \n 5 <split [249/85]> Bootstrap05 <tibble [2 x 4]> <tibble [0 x 3]> <tibble>    \n 6 <split [249/87]> Bootstrap06 <tibble [2 x 4]> <tibble [0 x 3]> <tibble>    \n 7 <split [249/94]> Bootstrap07 <tibble [2 x 4]> <tibble [0 x 3]> <tibble>    \n 8 <split [249/88]> Bootstrap08 <tibble [2 x 4]> <tibble [0 x 3]> <tibble>    \n 9 <split [249/95]> Bootstrap09 <tibble [2 x 4]> <tibble [0 x 3]> <tibble>    \n10 <split [249/89]> Bootstrap10 <tibble [2 x 4]> <tibble [0 x 3]> <tibble>    \n# ... with 15 more rows\n```\n:::\n:::\n\n\nWij hebben elk van onze kandidaat-modellen aangepast aan onze opnieuw bemonsterde trainingsreeks!\n\n### Het model evalueren.\nLaten we nu eens kijken hoe we het gedaan hebben. Eerst het logistisch regressiemodel. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(glm_rs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 6\n  .metric  .estimator  mean     n std_err .config             \n  <chr>    <chr>      <dbl> <int>   <dbl> <chr>               \n1 accuracy binary     0.918    25 0.00639 Preprocessor1_Model1\n2 roc_auc  binary     0.979    25 0.00254 Preprocessor1_Model1\n```\n:::\n:::\n\n\nGoed zo! De functie `collect_metrics()` extraheert en formatteert de .metrics kolom van resampling resultaten zoals hierboven voor het glm-model. Nu het random-forest model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(rf_rs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 6\n  .metric  .estimator  mean     n std_err .config             \n  <chr>    <chr>      <dbl> <int>   <dbl> <chr>               \n1 accuracy binary     0.912    25 0.00547 Preprocessor1_Model1\n2 roc_auc  binary     0.977    25 0.00202 Preprocessor1_Model1\n```\n:::\n:::\n\n\nDus... ook geweldig! Als ik in een situatie zit waarin een complexer model (zoals een random forest) hetzelfde presteert als een eenvoudiger model (zoals logistische regressie), dan kies ik het eenvoudiger model. Laten we eens dieper ingaan op hoe het het doet. Bijvoorbeeld, hoe voorspelt het glm-model de twee klassen?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglm_rs %>%\n  conf_mat_resampled()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 3\n  Prediction Truth   Freq\n  <fct>      <fct>  <dbl>\n1 female     female  41.1\n2 female     male     3  \n3 male       female   4.4\n4 male       male    42.3\n```\n:::\n:::\n\n\nOngeveer hetzelfde, wat goed is. We kunnen ook een ROC curve maken.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglm_rs %>%\n  collect_predictions() %>%\n  group_by(id) %>%\n  roc_curve(sex, .pred_female) %>%\n  ggplot(aes(1 - specificity, sensitivity, color = id)) +\n  geom_abline(lty = 2, color = \"gray80\", size = 1.5) +\n  geom_path(show.legend = FALSE, alpha = 0.6, size = 1.2) +\n  coord_equal()\n```\n\n::: {.cell-output-display}\n![](classificeren-van-palmer-penguins_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nDeze ROC-curve is grilliger dan andere die u wellicht hebt gezien omdat de dataset klein is.\n\nHet is eindelijk tijd om terug te keren naar de testset. Merk op dat we de testset tijdens deze hele analyse nog niet hebben gebruikt; de testset is kostbaar en kan alleen worden gebruikt om de prestaties op nieuwe gegevens in te schatten. Laten we nog een keer passen op de trainingsgegevens en evalueren op de testgegevens met behulp van de functie `last_fit()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_final <- penguin_wf %>%\n  add_model(glm_spec) %>%\n  last_fit(penguin_split)\n\npenguin_final\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Resampling results\n# Manual resampling \n# A tibble: 1 x 6\n  splits           id               .metrics .notes   .predictions .workflow \n  <list>           <chr>            <list>   <list>   <list>       <list>    \n1 <split [249/84]> train/test split <tibble> <tibble> <tibble>     <workflow>\n```\n:::\n:::\n\n\nDe metriek en voorspellingen hier zijn op de *testgegevens*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(penguin_final)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 4\n  .metric  .estimator .estimate .config             \n  <chr>    <chr>          <dbl> <chr>               \n1 accuracy binary         0.857 Preprocessor1_Model1\n2 roc_auc  binary         0.938 Preprocessor1_Model1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_predictions(penguin_final) %>%\n  conf_mat(sex, .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Truth\nPrediction female male\n    female     37    7\n    male        5   35\n```\n:::\n:::\n\n\nDe coëfficiënten (die we eruit kunnen halen met `tidy()`) zijn geschat met behulp van de trainingsdata. Als we `exponentiate = TRUE` gebruiken, hebben we odds ratio's.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_final$.workflow[[1]] %>%\n  tidy(exponentiate = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 x 5\n  term              estimate std.error statistic     p.value\n  <chr>                <dbl>     <dbl>     <dbl>       <dbl>\n1 (Intercept)       5.75e-46  19.6        -5.31  0.000000110\n2 speciesChinstrap  1.37e- 4   2.34       -3.79  0.000148   \n3 speciesGentoo     1.14e- 5   3.75       -3.03  0.00243    \n4 bill_length_mm    1.91e+ 0   0.180       3.60  0.000321   \n5 bill_depth_mm     8.36e+ 0   0.478       4.45  0.00000868 \n6 flipper_length_mm 1.06e+ 0   0.0611      0.926 0.355      \n7 body_mass_g       1.01e+ 0   0.00176     4.59  0.00000442 \n```\n:::\n:::\n\n- De grootste kansverhouding geldt voor de snaveldiepte, en de op één na grootste voor de snavellengte. Een toename van 1 mm snaveldiepte komt overeen met bijna 4x meer kans om een mannetje te zijn. De kenmerken van de bek van een pinguïn moeten geassocieerd zijn met het geslacht.   \n- We hebben geen sterke aanwijzingen dat de lengte van de vleugels verschillend is tussen mannelijke en vrouwelijke pinguïns, als we de andere maten controleren; misschien moeten we dat onderzoeken door de eerste grafiek te veranderen!\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  filter(!is.na(sex)) %>%\n  ggplot(aes(bill_depth_mm, bill_length_mm, color = sex, size = body_mass_g)) +\n  geom_point(alpha = 0.5) +\n  facet_wrap(~species)\n```\n\n::: {.cell-output-display}\n![](classificeren-van-palmer-penguins_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\nJa, de mannetjes- en vrouwtjespinguïns zijn nu veel meer gescheiden.\n\n\n",
    "supporting": [
      "classificeren-van-palmer-penguins_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}