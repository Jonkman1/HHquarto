{
  "hash": "3806c99fd812269f38bd7fa50ad119e2",
  "result": {
    "markdown": "---\ntitle: \"Communiceren met RMarkdown\"\nsubtitle: \n   RMarkdown is de nieuwe manier om diverse wetenschappelijke producten te delen met anderen. Het kan op verschillende manieren gereproduceerd worden en het kan de opbrengsten aantrekkelijk communiceren naar  \nauthor: \"Harrie Jonkman\"\ndate: \"12/15/2018\"\ncategories: [communicatie]\nimage: \"img/RMarkdowncomm.PNG\"\n---\n\n\n\n\n# Van $\\Latex$ naar RMarkdown\n\nEerder schreef ik een snelle introductie op enkele algemene kenmerken van LaTeX, een opensource software syteem om verschillende soorten documenten te zetten. Dit programmma wordt vooral gebruikt voor maken van wetenschappelijke documenten. Die introductie is hier []() te vinden. Daarin laat ik zien hoe $\\Latex$ werkt en welke verschillende soorten documenten je ermee kunt maken (waaronder artikel, boek, rapport, een poster, een proefschrift, een presentatie). Verder kun je hier [$\\Latex$-tutorial](http://www.latex-tutorial.com) ook informatie vinden  en hier [Snel overzicht](http://quicklatex.blogspot.nl).\n\n$\\Latex$ werkt met veel verschillende commando's en je moet de tijd nemen dit te leren. Op internet is overigens wel goede informatie te vinden en de meeste problemen kun je zelf oplossen. De laatste jaren vinden er binnen het programma R veel ontwikkelingen plaats die het maken van wetenschappelijke documenten vergemakkelijken. De ontwikkelingen vallen onder de term RMarkdown dat in 2015 met de introductie van het knitr-pakket werd ge√Øntroduceerd. Hier wordt binne R gebruik gemaakt van de Markdown taal waarmee technische documenten betrekkelijk eenvoudig te maken zijn. Het pakket maakt het mogelijk om verschillende soorten documenten te maken (waaronder pdf, html en word). Tot slot maakt RMarkdown het mogelijk om tekst (inclusief bv. grafieken, tabellen en referentie) en analyses in een keer te draaien. Met RMarkdown, knitr en alles wat hier aan vastzit kun je onder anderen:   \n- Een goed uitziend wetenschappelijk document maken in verschillende formats tegelijkertijd (pdf, html en word);   \n- Kun je met notebooks werken waarin naast tekst analyses zijn opgenomen;   \n- Kun je nieuwe vormen van presentaties voorbereiden;   \n- Kun je dashboards maken waarin informatie overzichtelijk, aantrekkelijk, flexibel en interactief wordt gepresenteerd;   \n- Kun je interactieve toepassingen maken bijvoorbeeld door de inzet van Shiny;  - Kun je wetenschappelijke artikelen maken; \n- Kun je boeken zelf maken; \n- KUn je een blog en website maken.   \n\nEen uitgebreide gids hierover vind je hier [RMarkdown: The Definitive Guide](https://bookdown.org/yihui/rmarkdown/). En een handleiding vind je hier [Cheat sheet RMarkdown](https://www.rstudio.com/resources/cheatsheets/#rmarkdown).\n \n## Installatie\nOm met onderstaande te kunnen werken moet je in ieder geval R installeren [R](https://www.rstudio.com) alsmede RStudio [RStudio](http://www.rstudio.com). Om pdf te draaien moet je ook Latex op je computer installeren. Heb je dat niet kun je ook binnen R/RStudio het pakket `tinytex`. Als je R en RStudio hebt binnengehaald moet je de pakketten `knitr` en `rmarkdown` binnenhalen. Voor achtergrondinformatie over R, RStudio en RMarkdown vind je hier [RRStudioRMarkdown]()informatie \n\n\nEerder schreef ik al uitgebreid over Reproducable Research en de workshop die Schmidt op **11 Mei 2016** en er waren wat aanvullende materialen beschikbaar zie post Reproducable Research.Delen daarvan breng ik hier nog eens onder de aandacht en ik update de informatie.\n\n\n## Instructies bij het installeren \n\n**Voordat je aan het werk gaat, zorg ervoor dat je het volgende hebt gedaan:**\n\n1. Open **RStudio**.  \n2. Installeer en download het **devtools** R pakket door het volgende commando te runnen. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"devtools\") # Nodig voor deze sessie\nlibrary(\"devtools\")          # Nodig voor deze sessie   \n```\n:::\n\n\n3. Check of je de goede versie hebt van **R** en **RStudio** door `devtools::session_info()` in de R console te draaien.  \nHier geeft `devtools::` aan om de `session_info()` functie in **R** te gebruiken ipv het **devtools** pakket en de `sessionInfo()` functie binnen het **utils** pakket.  Het runnen van `devtools::session_info()` stelt ons in staat de versie van **R** en **RStudio** vast te stellen. \n\nHeb je de volgende versie van **R** en **RStudio**?  \n\n- **R:** `Versie 3.3.0 (2016-05-03)`  \n- **RStudio:** `0.99.1172`  \n\n  - Zo **ja** dan kun je van start gaan!  \n  - Zo **nee** dan heb je nieuwe versies van **R** en **RStudio** nodig, volg dan \n<a href=\"http://umswc.github.io/2016-05-11-RMarkdown/\" target=\"_blank\">Setup</a> in dit document.  \n\n4. Installeer vervolgens enkele R pakketten die je nodig hebt.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Installeer de goede pakketten\n#install.packages(\"rmarkdown\")  # Dit zorgt voor koele dynamische documenten\n#install.packages(\"knitr\")      # Hier kun je R code Chunks mee runnen\n#install.packages(\"ggplot2\")    # Voor het plotten van mooie figuren\n#install.packages(\"DT\")         # Om interactieve HTML tabellen te maken\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Deze pakketten ook laden om er zeker van te zijn dat je de goede pakketten hebt\nlibrary(\"rmarkdown\")           # Dit zorgt voor koele dynamische documenten\nlibrary(\"knitr\")               # Hier kun je R code Chunks mee runnen\nlibrary(\"ggplot2\")             # Voor het plotten van mooie figuren\nlibrary(\"DT\")                  # Om interactieve HTML tabellen te maken\n```\n:::\n\n\n5. Als je de pakketten zonder fouten hebt geladen, kun je beginnen!  \n\n\n\n# Goede bronnen\n\nDeze tutorial kon **niet** samengesteld worden zonder onderstaande goede bronnen:  \n\n1. De <a href=\"http://rmarkdown.rstudio.com/index.html\" target=\"_blank\">RMarkdown</a> website van RStudio.  \n2. Dr. Yuhui Xie's boek:  <a href=\"http://www.amazon.com/Dynamic-Documents-knitr-Chapman-Hall/dp/1482203537\" target=\"_blank\">Dynamic Documents with R and Knitr</a> 2^nd^ Edition [@Xie2015] en zijn <a href=\"http://yihui.name/knitr/\" target=\"_blank\">Knitr</a> website.  \n    - **HEEL VEEL DANK** aan Dr. Xie voor het schrijven van het **knitr** pakket!!  \n3. Dr. Karl Broman's <a href=\"http://kbroman.org/knitr_knutshell/\" target=\"_blank\">\"Knitr in a Knutshell\"</a>.  \n4. <a href=\"https://www.rstudio.com/resources/cheatsheets/\" target=\"_blank\">Cheatsheets</a> released by RStudio.\n\n\nSinds 2016 zijn er meer interessante documenten uitgekomen:\n1. Het standaardboek over RMarkdown [RMarkdown: The Definitive Guide](https://bookdown.org/yihui/rmarkdown/)\n2. Christopher Gandrud, **Reproducable Research with R and RStudio**.\n\n# Dynamische documenten  \n\n<a href=\"https://en.wikipedia.org/wiki/Literate_programming\">Literate programming</a>, zoals dat in het Engels wordt genoemd, is het basisidee achter dynamische documenten en is geintroduceerd door Donald Knuth in 1984.  Oorspronkelijk om de broncode en de bijbehorende software  documentatie samen te brengen.  Tegenwoordig creeren we dynamische documenten waarin het programma of de analyse code samen draaien om tot 'outputs' te komen (bv. tabellen, plots, modellen, etc) die worden uitgelegd via narratief schrijven.\n\n\nTraditioneel gebruikten mensen commentaren om het verhaal in de code file kwijt te kunnen raken (voor **R** zou dat een `.R` file zijn). Deze file zou het volgende in kunnen houden:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Titel:  Relatie tussen Autogewicht en Gasefficientie/of-verbruik\n# Door :  Harrie Jonkman  \n# Datum:  11 Mei 2016\n\n# Ik verspel dat er een relatie is tussen het gewicht van de auto en de afstand die met de brandstof afgelegd kan worden.  \n# Dat test ik met een lineaire analyse van de ''mtcarsdataset' als onderdeel van de R datasets\n\n# Hoe zien de data eruit?\n#datatable(mtcars) # Interactieve tabel \n\n# Is er een relatie tussen het gewicht en de afstand per, in dit geval, gallon?\nlm_mpg <- lm(mpg ~ wt, data = mtcars) # Run het lineaire model dat mpg voorspelt op basis van wt\ncoef_lm_mpg <- coef(summary(lm_mpg))  # Haal de coefficienten eruit voor de tabel die komt \nkable(coef_lm_mpg)                    # Maak een niet-interactieve tabel - een functie in knitr\n\n# Plot de relatie tussen gewicht en afstand in mijl per gallon   \nplot <- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + # \n  geom_smooth(method = \"lm\") + theme_bw() +           # Maak een lineair model en maak het zwart en wit\n  xlab(\"Weight (1000lbs)\") + ylab(\"Miles per Gallon\") # Voeg tekst aan de assen toe\n\n\n# Het lijkt erop dat met een toename van 1000 pounds er een afname is van brandstof gebruik met 5.34 mijl per gallon\n# Het eind\n```\n:::\n\n\nDe gebruiker zal de commentaren lezen en de codes zelf runnen.  \n\nEchter, *'literate programming'* stelt ons in staat de code te runnen en de resultaten te beschrijven, allemaal in een document dat we kunnen delen.  We zouden bijvoorbeeld het volgende kunnen doen:  \n\n```\n**Relatie tussen gewicht van de auto en het brandstofverbruik**  \n*Door:* Harrie Jonkman  \n*Datum:* 27 november 2018\n\nIk voorspel dat er een relatie is tussen het gewicht en de afstand die met de brandstof kan worden afgelegd. Ik test dat met een lineair model op een dataset in R en zet dit als volgt in het programma.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hoe zien de data eruit?\ndatatable(mtcars) # Interactieve tabel \n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-dd066556939a628788e9\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-dd066556939a628788e9\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"Mazda RX4\",\"Mazda RX4 Wag\",\"Datsun 710\",\"Hornet 4 Drive\",\"Hornet Sportabout\",\"Valiant\",\"Duster 360\",\"Merc 240D\",\"Merc 230\",\"Merc 280\",\"Merc 280C\",\"Merc 450SE\",\"Merc 450SL\",\"Merc 450SLC\",\"Cadillac Fleetwood\",\"Lincoln Continental\",\"Chrysler Imperial\",\"Fiat 128\",\"Honda Civic\",\"Toyota Corolla\",\"Toyota Corona\",\"Dodge Challenger\",\"AMC Javelin\",\"Camaro Z28\",\"Pontiac Firebird\",\"Fiat X1-9\",\"Porsche 914-2\",\"Lotus Europa\",\"Ford Pantera L\",\"Ferrari Dino\",\"Maserati Bora\",\"Volvo 142E\"],[21,21,22.8,21.4,18.7,18.1,14.3,24.4,22.8,19.2,17.8,16.4,17.3,15.2,10.4,10.4,14.7,32.4,30.4,33.9,21.5,15.5,15.2,13.3,19.2,27.3,26,30.4,15.8,19.7,15,21.4],[6,6,4,6,8,6,8,4,4,6,6,8,8,8,8,8,8,4,4,4,4,8,8,8,8,4,4,4,8,6,8,4],[160,160,108,258,360,225,360,146.7,140.8,167.6,167.6,275.8,275.8,275.8,472,460,440,78.7,75.7,71.1,120.1,318,304,350,400,79,120.3,95.1,351,145,301,121],[110,110,93,110,175,105,245,62,95,123,123,180,180,180,205,215,230,66,52,65,97,150,150,245,175,66,91,113,264,175,335,109],[3.9,3.9,3.85,3.08,3.15,2.76,3.21,3.69,3.92,3.92,3.92,3.07,3.07,3.07,2.93,3,3.23,4.08,4.93,4.22,3.7,2.76,3.15,3.73,3.08,4.08,4.43,3.77,4.22,3.62,3.54,4.11],[2.62,2.875,2.32,3.215,3.44,3.46,3.57,3.19,3.15,3.44,3.44,4.07,3.73,3.78,5.25,5.424,5.345,2.2,1.615,1.835,2.465,3.52,3.435,3.84,3.845,1.935,2.14,1.513,3.17,2.77,3.57,2.78],[16.46,17.02,18.61,19.44,17.02,20.22,15.84,20,22.9,18.3,18.9,17.4,17.6,18,17.98,17.82,17.42,19.47,18.52,19.9,20.01,16.87,17.3,15.41,17.05,18.9,16.7,16.9,14.5,15.5,14.6,18.6],[0,0,1,1,0,1,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,1,0,0,0,1],[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1],[4,4,4,3,3,3,3,4,4,4,4,3,3,3,3,3,3,4,4,4,3,3,3,3,3,4,5,5,5,5,5,4],[4,4,1,1,2,1,4,2,2,4,4,3,3,3,4,4,4,1,2,1,1,2,2,4,2,1,2,2,4,6,8,2]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>mpg<\\/th>\\n      <th>cyl<\\/th>\\n      <th>disp<\\/th>\\n      <th>hp<\\/th>\\n      <th>drat<\\/th>\\n      <th>wt<\\/th>\\n      <th>qsec<\\/th>\\n      <th>vs<\\/th>\\n      <th>am<\\/th>\\n      <th>gear<\\/th>\\n      <th>carb<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3,4,5,6,7,8,9,10,11]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n\n```{.r .cell-code}\n# Is er een relatie tussen het gewicht van de auto en de afstand die het kan afleggen met de brandstof?\nlm_mpg <- lm(mpg ~ wt, data = mtcars) # Run het lineair model dat mpg voorspelt op basis van wt\ncoef_lm_mpg <- coef(summary(lm_mpg))  # Haal de co?ffici?nten voor de tabel eruit\nkable(coef_lm_mpg)                    # Maak een niet-interactieve tabel - functie in knitr\n```\n\n::: {.cell-output-display}\n|            |  Estimate| Std. Error|   t value| Pr(>&#124;t&#124;)|\n|:-----------|---------:|----------:|---------:|------------------:|\n|(Intercept) | 37.285126|   1.877627| 19.857575|                  0|\n|wt          | -5.344472|   0.559101| -9.559044|                  0|\n:::\n\n```{.r .cell-code}\n# Plot de relatie tussen gewicht en mijl per gallon  \nplot <- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + # \n  geom_smooth(method = \"lm\") + theme_bw() +           # voeg lineair model toe en maak het zwart en wit \n  xlab(\"Weight (1000lbs)\") + ylab(\"Miles per Gallon\") # Voeg tekst aan x en y-as toe\n```\n:::\n\nHet lijkt erop dat met elke **1000** pond er een **afname** is in brandstof gebruik met 5.3444716 mijl per gallon\n\nHet einde\n\n```\n\n\n\n## Reproduceerbaar onderzoek  \n\nGoede uitvoering van reproduceerbaar onderzoek houdt in ieder geval in:  \n\n1. Het hele project in een directory plaatsen die wordt ondersteund door de 'version control'.   \n2. Code en data vrijlaten.     \n3. Alles documenteren en de code als documentatie gebruiken!     \n4. Figuren, tabellen en de statistiek zijn het resultaat van scripts en `codes die in de tekst staan`.     \n5. Schrijf in de codes de paden die worden gebruikt.     \n6. Stel 'seed' in zodat een volgende persoon dezelfde resultaten krijgt.     \n7. Laat ook informatie zien waarmee de codefile wordt uitgevoerd. Je kunt bijvoorbeeld de `devtools::session_info()` gebruiken.   \n\nWat het belang van reproduceerbaar onderzoek betreft, zie ook het document van de Koninklijke Nederlandse Academie voor Wetenschappen\n\n# Markdown\n\nOm RMarkdown helemaal te begrijpen moeten we het eerst iets over Markdown weten. Dat is een systeem om een simpele, leesbare tekst te maken die eenvoudig kan worden omgezet naar HTML.  Markdown is essentieel voor twee dingen:  \n\n1. Een kale tekst die de syntax vormt.     \n2. Een software gereedschap dat in Perl is geschreven.     \nHet zet de kale tekst om in HTML.     \n    \n>**Belangrijkste doel van Markdown:**  \n> Maakt de syntax van het orginele (pre-HTML) document zo leesbaar mogelijk. \n\nZou je deze code liever in HTML lezen?  \n```html\n<body>\n  <section>\n    <h1>Paklijst voor bergklimmen</h1>\n    <ul>\n      <li>Bergschoenen</li>\n      <li>Klimgordel</li>\n      <li>Rugzak</li>\n      <li>Touw</li>\n      <li>Zelfzekering</li>\n    </ul>\n  </section>\n</body>\n```\n\nOf deze code in Markdown?  \n```markdown\n# Paklijst voor bergklimmen\n\n* Bergschoenen\n* Klimgordel\n* Rugzak  \n* Touw\n* Zelfzekering\n```\nMarkdown is makkelijker om te lezen!\n\nWe zullen meer over de syntax van Markdown praten nadat we RMarkdown hebben geintroduceerd maar laten we ons allereerst beseffen hoeveel makkelijker ons leven is/zal zijn omdat Markdown bestaat!  Dank je <a href=\"https://en.wikipedia.org/wiki/John_Gruber\">John Gruber</a> en <a href=\"https://en.wikipedia.org/wiki/Aaron_Swartz\">Aaron Swartz</a> (RIP) voor het ontwikkelen van Markdown in 2004! \n\n\n\n# RMarkdown\n<a href=\"http://rmarkdown.rstudio.com/\">RMarkdown</a> is een variant van Markdown dat het makkelijker maakt om met RStudio dynamische documenten, presentaties en rapporten te maken.  Het omvat 'R code chunks' (ik laat hier even het Engels staan) om met **knitr** te gebruiken waarmee makkelijker reproduceerbare (web-based) rapporten gemaakt kunnen worden die automatisch aangepast worden wanneer de onderliggende code is veranderd.     \n\n- RMarkdown laat jou **Markdown** combineren met plaatjes, linken, tabellen, $\\LaTeX$ en de code zelf.   \n- RStudio zorgt ervoor dat het maken van documenten met RMarkdown makkelijk wordt.     \n- RStudio is (net als R) vrij te gebruiken en draait op elk systeem.\n\n\n**RMarkdown geeft verschillende typen files waaronder onder anderen:**  \n\n- <a href=\"http://rmarkdown.rstudio.com/html_document_format.html\">HTML</a>    \n- <a href=\"http://rmarkdown.rstudio.com/pdf_document_format.html\">PDF</a>  \n- Markdown  \n- <a href=\"http://rmarkdown.rstudio.com/word_document_format.html\">Microsoft Word</a>   \n- Presentaties:  \n    - Opvallende HTML5 presentaties:  \n        - <a href=\"http://rmarkdown.rstudio.com/ioslides_presentation_format.html\">ioslides</a>\n        - <a href=\"http://rmarkdown.rstudio.com/slidy_presentation_format.html\">Slidy</a>  \n        - <a href=\"http://slidify.org/index.html\">Slidify</a>\n    - PDF presentaties:  \n        - <a href=\"http://rmarkdown.rstudio.com/beamer_presentation_format.html\">Beamer</a>  \n    - Handouts:  \n        - <a href=\"http://rmarkdown.rstudio.com/tufte_handout_format.html\">Tufte Handouts</a> \n- <a href=\"http://rmarkdown.rstudio.com/package_vignette_format.html\">HTML R Package Vignettes</a>  \n- <a href=\"http://rmarkdown.rstudio.com/rmarkdown_websites.html\">Even Entire Websites!</a>   \n\n\n\nTerwijl er heel veel verschillende documenten kunnen worden geleverd met RMarkdown, ligt hier de nadruk in de eerste plaats op HTML output files omdat die voor mijn onderzoek misschien het meest bruikbaar en flexibel zijn.\n\n## Waarom R Markdown?\nEen aantrekkelijk gereedschap voor reproduceerbare en dynamische rapporten!       \n\n- Terwijl het was gemaakt voor R, accepteert het veel programmeertalen.  Om het eenvoudig te houden, werken we vandaag alleen met R.  \n- Een code kan op een aantal manieren worden uitgevoerd:  \n    1. **Inline Code:**  Een korte code die in de geschreven tekst van het document wordt uitgevoerd.    \n    2. **Code Chunks:**  Delen van het document omvatten verschillende zinnen analyse code.  Dat kan een plot of een tabel zijn, maar ook berekeningen van de samenvattende statistiek, pakketten laden, etc.     \n- Het is makkelijk om:     \n    - Plaatjes op te nemen.     \n    - De Markdown syntax te leren.     \n    - $\\LaTeX$ elementen op te nemen.     \n    - Interactieve tabellen op te nemen.   \n    - Gebruik de versie via **Git**.     \n        - Dan is het makkelijker om te delen en samen te werken in analyses, projecten en publicaties!   \n    - Externe linken toe te voegen - Rmarkdown begrijpt zelfs enige html codes!\n    - Om mooie documenten te maken.   \n- Je hoeft je geen zorgen te maken over pagina breuken of het plaatsen van de figuren.     \n- Consolideer jouw code en plaats het in een file:  \n    + Powerpoint, PDFs, html documenten en word files     \n\n## Eenvoudige werkwijze  \n\nIn het kort, om een rapport te maken:  \n\n1. **Open** een `.Rmd` file.    \n    - Maak een YAML kop (meer hierover zo dadelijk!)   \n2. **Schrijf** de inhoud met RMarkdown syntax.     \n3. **Neem mee** de R code in code chunks of met een inline code.     \n4. **Draai** de document output.     \n\n\n\n\n**Overzicht van de stappen die RMarkdown maakt om een 'gerenderd' document te krijgen:**  \n\n1. Maak een `.Rmd` rapport met 'R code chunks' en markdown verhalen (zoals hierboven in stappen beschreven).    \n2. Geef de `.Rmd`-file aan `knitr` om de 'R code chunks' uit te voeren en een nieuwe `.md` file te maken.     \n    - <a href=\"http://yihui.name/knitr/\" target=\"_blank\">Knitr</a> is een pakket binnen R die jou in staat stelt de code binnen RMarkdown documenten uit te voeren zoals HTML, latex, pdf, word en andere document types.  \n3. Geef de `.md` file aan **pandoc**, die er een definitief document van maakt (b.v. html, Microsoft word, pdf, etc.).     \n    - <a href=\"http://pandoc.org/\" target=\"_blank\">Pandoc</a> is een universeel gereedschap om documenten te converteren en zet het ene document type (in dit geval: `.Rmd`) om in een ander (in dit geval: HTML)   \n\n\nHoewel dit mogelijk wat ingewikkeld lijkt, kunnen we op de `Knit` knop drukken boven aan de pagina. \n\n\n## Maak een `.Rmd` file  \n\nLaten we eens met een RMarkdown gaan werken!\n\n1.  In de menu bar, klik je op **File -> New File -> RMarkdown**  \n    \n    \n\n\n2. Dan krijg je het volgende te zien  \n- Hierbinnen kies je het type output dat je wilt hebben.  **Opgelet:** deze output kan later heel makkelijk worden aangepast!  \n\n\n\n3. Klik **OK**  \n  \n\n\n## YAML koppen\n\nYAML staat voor \"YAML Ain't Markup Language\" en is eigenlijk de structuur voor de metadata van het document.  Het staat tussen twee regels van drie streepjes `---` en wordt automatisch omgezet door RStudio. Een eenvoudig voorbeeld:  \n\n```\n---\ntitle:  \"Analyse Rapport\"  \nAuthor:  \"Harrie Jonkman\"  \ndate: \"1 Maart 2017\"  \noutput:  html_document\n---\n```\n\nHet voorbeeld boven zal een HTML document maken.  Echter, de volgende opties zijn ook beschikbaar.  \n\n- `html_document`  \n- `pdf_document`  \n- `word_document`  \n- `beamer_presentation` (pdf powerpoint)  \n- `ioslides_presentation` (HTML powerpoint)  \n- en nog meer ...  \n\nHier ligt de nadruk op HTML files.  Echter voel je vrij als je hier wat mee wilt spelen door bv. word en pdf documenten te maken.  Presentatie-documenten kennen een wat andere syntax (bv. om aan te geven wanneer de ene dia eindigt en de andere begint) en dan is er nog wat markdown syntax specifiek voor presentaties maar die gaat voorbij het doel van deze workshop.  \n\n \n\n## Markdown Basis  \n\nKijk hiernaar <a href=\"http://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf\">RMarkdown Reference Guide</a>\n\nHaal hier ook informatie vandaan <a href=\"http://www.rstudio.com/wp-content/uploads/2016/03/rmarkdown-cheatsheet-2.0.pdf\">RMarkdown Cheatsheet</a>.\n\n\n**Handige tips:**  \n\n- Eindig elke regel met drie spaties om een nieuwe regel te beginnen.     \n- Woorden binnen een code moeten aan beide kanten zo'n kommateken kennen:    `  \n- Om iets tot superscript te maken moet je een `^` aan beide zijden plaatsen.  Super^script^ werd gevormd door `Super^script^` te typen.     \n- Vergelijkingen kunnen in een inline code worden geplaatst met `$` en als blok gecentreerd binnen het document door `$$`.  Bijvoorbeeld $E = mc^2$ staat tussen de regels terwijl het volgende geblokt wordt opgenomen: $$E = mc^2$$  \n- Ander wiskundig materiaal:  \n        - Vierkantswortel:  `$\\sqrt{b}$` zal $\\sqrt{b}$ maken \n        - Breuken:  `$\\frac{1}{2}$` = $\\frac{1}{2}$  \n            - - Vergelijkingen met breuken:  `$f(x)=\\frac{P(x)}{Q(x)}$` = $f(x)=\\frac{P(x)}{Q(x)}$  \n        - Binomiale Coefficienten:  `$\\binom{k}{n}$` = $\\binom{k}{n}$  \n        - Integralen:  `$$\\int_{a}^{b} x^2 dx$$` = $$\\int_{a}^{b} x^2 dx$$\n    - <a href=\"https://www.sharelatex.com/learn/Main_Page\">ShareLaTeX</a> is een prachtige bron voor LaTeX-codes.\n\n**Nog wat wiskundig materiaal:**\n\t\t\n| Beschrijving |         Code        |      Voorbeelden          |\n|------------:|---------------------|:----------------------:|\n|   Griekse letters  |  `$\\alpha$` `$\\beta$` `$\\gamma$` `$\\rho$` `$\\sigma$` `$\\delta$` `$\\epsilon$` `$mu$`  |    $\\alpha$ $\\beta$ $\\gamma$ $\\rho$ $\\sigma$ $\\delta$ $\\epsilon$ $\\mu$   |\n|  Binaire handelingen  |  `$\\times$` `$\\otimes$` `$\\oplus$` `$\\cup$` `$\\cap$`|   $\\times$ $\\otimes$ $\\oplus$ $\\cup$ $\\cap$\t$\\times$|\n|    Relationele handelingen  |    `$< >$` `$\\subset$` `$\\supset$` `$\\subseteq$` `$\\supseteq$` |     $< >$ $\\subset$ $\\supset$ $\\subseteq$ $\\supseteq$ |\n|    Verder  |    `$\\int$` `$\\oint$` `$\\sum$` `$\\prod$` |     $\\int$ $\\oint$ $\\sum$ $\\prod$ |\n\n\n\n\n\n> **Uitdaging:** \n> Probeer eens de volgende output te maken:  \n\n1. Vandaag voel ik mij **vet** omdat ik *RMarkdown* leer.\n\n2.  *honing* is **heel** _zoet_.  \n\n3. YAS!!!^!!!^  \n\n4. R^2^ waarden zijn **informatief**!  \n\n5. $R^{2}$ beschrijft de *variantie* verklaard door het model.  \n\n6.  ~~Ik kende geen RMarkdown~~  `Vandaag heb ik RMarkdown geleerd`   \n\n7.  [RStudio link](www.rstudio.com)  \n\n8.  Output van het volgende:  \n```\n# RMarkdown   \n## R   \n### Knitr   \n#### Pandoc  \n##### HTML  \n```\n\n9.  $\\sqrt{b^2 - 4ac}$\n\n10. $$\\sqrt{b^2 - 4ac}$$  \n\n11.  $X_{i,j}$  \n\n> 12.  Vandaag maak ik een dynamisch document!  \n\n13.  Het volgende lijstje:  \n\n**Chocolade Chips Kook Recept** \n\n1. boter\n2. suiker  \n    - Een mengsel van bruine en witte suiker maakt het lekkerder\n        - mix dat met boter voordat je de *eieren* eraan toevoegt\n3. eieren \n4. vanille  \n5. Mix wat droge ingredienten: \n    - meel, zout, bak soda  \n6. chocolade chips  \n\n\n\n## Een Code in het document\n\nEr zijn twee manieren om een code in een RMarkdown document op te nemen.  \n\n\n1. **Code in het document:**  Korte code als een onderdeel van het geschreven document.  \n\n2. **Code Chunks:**  Delen van het document die verschillende programmeer of analyse codes omvatten.  Daarmee kan een figuur of tabel worden gemaakt, statistieken worden berekend, pakketten worden geladen, etc.  \n    \n    \n### R Code in het document  \n\nEen R code kan in  het document wordt gemaakt door een komma hoog achterwaarts (`) en de letter r gevolgd door nog zo'n komma.  \n\n- Bijvoorbeeld:  2^11^ is 2048.  \n\nStel dat je een p-waarde rapporteert en je wilt niet terug om de statistische test steeds weer uit te voeren. De p-waarde was eerder `0.0045`.  \nDit is echt handig als de resultaten op papier moeten worden gezet.  Bijvoorbeeld, je hebt een aantal statistieken uitgevoerd voor jouw wetenschappelijke vragen is dit een manier waarop **R** die waarde in a variabele naam bewaart. Bijvoorbeeld: Wijkt het brandstofverbruik van de automaat significant af de auto met handtransmissie significant af binnen de `mtcars` data set?  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg_auto <- mtcars[mtcars$am == 0,]$mpg # automatic transmission mileage\nmpg_manual <- mtcars[mtcars$am == 1,]$mpg # manual transmission mileage\ntransmission_ttest <- t.test(mpg_auto, mpg_manual)\n```\n:::\n\n\nOm de p-waarde vast te stellen kunnen we `transmission_ttest$p.value` als R code in het document gebruiken. \n\nDe p-waarde is dan 0.0013736.\n\n\n### R Code Chunks  \n\nR code chunks (nogmaals ik gebruik maar de Engelse benaming hier, sorry)kunnen worden gebruikt om de R output in het document te krijgen of om de code als illustratie zichtbaar te maken.  \n\n**De anatomie van een code chunk:**  \n\nOm een R code chunk te plaatsen, kun je met de hand typen door ```` ```{r} ```` gevolgd door  ```` ``` ```` op een volgende regel. Je kunt ook de `Insert a new code chunk` knop gebruiken of de 'shortcut key'. Dat geeft dan de volgende code chunk:\n\n\n    `\u000b``{r}\n    n <- 10\n    seq(n)\n    ```\n\n\nGeef de code chunk een betekenisvolle naam die samenhangt met wat het doet. Hieronder heb ik code chunk `10-random-numbers` genoemd:\n\n    `\u000b``{r 10-random-numbers}\n    n <- 10\n    seq(n)\n    ```\n    \n    \nDe code chunk input en output zien er dan als volgt uit:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn = 10\nseq(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\n\n\n\n# Knitr  \n\n**Knitr** is een R-pakket dat werkt met  \n\n1. **Identificeren van de code** zowel van de chunks als in de tekst zelf\n2. **Evalueren van** de hele code en geeft de resultaten terug \n3. **Teruggeven van** de geformuleerde resultaten en combineert met de orginele file.   \n\n**Knitr** draait de code zoals die in de R console zou draaien.  \n\n\n\n**Knitr** werkt vooral met code chunks.\n\nEen code chunk ziet er als volgt uit:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    x <- rnorm(100)  \n    y <- 2*x + rnorm(100)\n    ```\n    :::\n  \n\n\n**Goede praktijken met betrekking tot code chunks:**  \n\n1. Benoem/label jouw code chunks!    \n2. In plaats van de chunk opties te specificeren in iedere chunk, kun je de algemene chunk opties aan het begin van het document vastzetten.  \n\n## Chunk Labels \n\nChunk labels krijgen **unieke IDs** in een document en zijn goed voor:  \n\n- Om externe files te genereren zoals plaatjes en 'cached' documenten.     \n- Chunk labels zijn vaak output als fouten omhoog komen(vaker voor codes in het document).        \n\n\n\nAls je de code chunk een naam geef, gebruik dan `-` of `_` tussen woorden voor code chunks labels in plaats van ruimtes.  Dat helpt jou en andere gebruikers bij het navigeren in het document.    \n\nChunk labels moeten uniek zijn in het document - anders zal er een fout optreden!      \n  \n  \n\n## Chunk Opties  \n\nDruk tab als tussen de haakjes code chunk opties omhoog komen.\n\n\n\n- `results = \"asis\"` staat voor \"as is\" en geeft de output van een niet geformateerde versie. \n- `collapse` is een andere chunk optie die handig kan zijn, zeker als een code chunk veel korte R uitdrukking heeft met wat output.     \n\nEr zijn teveel chunk opties om hier te behandelen.  Kijk na deze workshop nog eens wat rond voor deze opties.\n\nEen mooie website om dat op te doen is <a href=\"http://yihui.name/knitr/options/#chunk_options\">Knitr Chunk Options</a>.  \n\n\n\n> **Uitdaging**  \n> Draai de code chunk hieronder en speel wat met de volgende knitr code chunk opties:  \n\n\n>- `eval = TRUE/FALSE`  \n>- `echo = TRUE/FALSE`  \n>- `collapse = TRUE/FALSE`  \n>- `results = \"asis\",\"markup` en `\"hide` \n\n> Sla je resultaten op in markdown.  \n> **Opgelet:**  Wees er zeker van dat je jouw chunks een naam geeft!\n\n::: {.cell}\n\n```{.r .cell-code}\n1+1\n2*5\nseq(1, 21, by = 3)\nhead(mtcars)\n```\n:::\n\n\n**Enkele voorbeelden voortbouwend op de chunk hierboven**\n\nResultaten van `results=\"markup\", collapse = TRUE}`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1+1\n## [1] 2\n2*5\n## [1] 10\nseq(1, 21, by = 3)\n## [1]  1  4  7 10 13 16 19\nhead(mtcars)\n##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n:::\n\n\n\nResultaten van `results=\"asis\", collapse = TRUE}`:\n\n\n```{.r .cell-code}\n1+1\n```\n\n[1] 2\n\n```{.r .cell-code}\n2*5\n```\n\n[1] 10\n\n```{.r .cell-code}\nseq(1, 21, by = 3)\n```\n\n[1]  1  4  7 10 13 16 19\n\n```{.r .cell-code}\nhead(mtcars)\n```\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\n## Globale opties \n\nHet kan zijn dat je dezelfde chunk settings wilt handhaven voor het gehele document. Het kan daarom handig zijn om de opties in een keer te typen in plaats van het iedere keer weer voor een chunk te moeten doen. Om dat te doen kun je de globale chunk opties bovenaan het document vaststellen.  \n\n```\nknitr::opts_chunk$set(echo = FALSE, \n                      eval = TRUE, \n                      message = FALSE,\n                      warning = FALSE, \n                      fig.path = \"Figures/\",\n                      fig.width = 12, \n                      fig.height = 8)\n```\n\nAls je bijvoorbeeld met iemand samenwerkt die de code niet wil zien, kun je schrijven `eval = TRUE` en `echo = FALSE` gebruiken zodat de code wel gedraaid wordt maar niet getoond. In aanvulling wil je misschien `message = FALSE` en `warning = FALSE` gebruiken zodat jouw samenwerkingspartner geen enkele boodschap of waarschuwing van R ziet.  \n\nAls je figuren wilt opslaan en bewaren in een subdirectory binnen het project, gebruik dan `fig.path = \"Figures/\"`.  Hier verwijst de `\"Figures/\"` naar een folder *Figures* binnen de huidige directory waar de figuur die gemaakt wordt in het document wordt opgeslagen.  \n**Opgelet:** de figuren worden niet standaard opgeslagen.  \n\nGlobale chunk opties zullen voor de rest van het documenten worden vastgezet. Als je wilt dat een bepaalde chunk afwijkt van de globale opties, maak dat aan het begin van die bepaalde chunk duidelijk.\n\n\n\n## Figuren  \n\n**Knitr** maakt vrij eenvoudig figuren. Als een analyse code binnen een chunk een bepaald figuur moet produceren, dan zal hij dat in het document afdrukken.  \n\nEnkele knitr chunk opties gerelateerd aan figuren:  \n\n- `fig.width` en `fig.height`  \n    - *Standaard:* `fig.width = 7`, `fig.height = 7`  \n- `fig.align`: Hoe het figuur uit te lijnen \n    - *Opties omvatten:* `\"left\"`, `\"right\"` en `\"center\"`  \n- `fig.path`: Een file pad naar de directory waar knitr de grafische output moet opslaan die er met de chunk wordt gemaakt.  \n    - *Standaard:* `'figure/'`  \n- Er is zelfs een `fig.retina`(alleen voor HTML output) voor hogere figuur resoluties met retina afdrukken.  \n\n\n::: {.cell}\n\n:::\n\n\n\nEen enkelvoudig figuur maken:  \n\nMet `fig.align = \"center\"`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = mpg)) + xlab(\"Miles per Gallon\") +\n    geom_histogram(bins = 30, fill = \"cornflowerblue\", color = \"black\") +\n    geom_vline(xintercept=mean(mtcars$mpg), col=\"red\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/single-fig-center-1.png){fig-align='center' width=384}\n:::\n:::\n\n\nMet `fig.align = \"right\"`\n\n\n::: {.cell layout-align=\"right\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = mpg)) + xlab(\"Miles per Gallon\") +\n    geom_histogram(bins = 30, fill = \"cornflowerblue\", color = \"black\") +\n    geom_vline(xintercept=mean(mtcars$mpg), col=\"red\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/single-fig-right-1.png){fig-align='right' width=384}\n:::\n:::\n\n\n\nMet `fig.align = \"left\"`\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = mpg)) + xlab(\"Miles per Gallon\") +\n    geom_histogram(bins = 30, fill = \"cornflowerblue\", color = \"black\") +\n    geom_vline(xintercept=mean(mtcars$mpg), col=\"red\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/single-fig-left-1.png){fig-align='left' width=384}\n:::\n:::\n\n\n\n\n\n## Tabellen\n\nTabellen kunnen in Markdown voor nogal wat hoofdpijn kosten. We gaan er hier verder niet op in. Als je meer wilt leren over Markdown-tabellen kijk naar <a href=\"http://rmarkdown.rstudio.com/authoring_pandoc_markdown.html#tables\">documentation on tables</a> op de RMarkdown website.\n\nEr zijn enkele tabeltypen die handig kunnen zijn. Hier zullen we ons vorig voorbeeld gebruiken van de `mtcars` data  \n\nIn zijn <a href=\"http://kbroman.org/knitr_knutshell/pages/figs_tables.html\">Knitr in a Knutshell</a> introduceert Dr. Karl Broman:  `kable`, `pander`en `xtable` en vooral die eerste twee deden mij plezier:  \n\n- `kable`: Binnen het **knitr** pakket - niet veel opties maar het ziet er goed uit. \n- `pander`: Binnen het **pander** pakket - heeft veel opties en handigheden.  Makkelijk voor het vetmaken van waarden (bv. waarden onder een bepaalde waarde).  \n\n`kable` en `pander` tabellen zijn mooi en handig bij het maken van niet-interactieve tabellen:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(mtcars, n = 4)) # kable table with 4 rows\n```\n\n::: {.cell-output-display}\n|               |  mpg| cyl| disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|\n|:--------------|----:|---:|----:|---:|----:|-----:|-----:|--:|--:|----:|----:|\n|Mazda RX4      | 21.0|   6|  160| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|\n|Mazda RX4 Wag  | 21.0|   6|  160| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|\n|Datsun 710     | 22.8|   4|  108|  93| 3.85| 2.320| 18.61|  1|  1|    4|    1|\n|Hornet 4 Drive | 21.4|   6|  258| 110| 3.08| 3.215| 19.44|  1|  0|    3|    1|\n:::\n\n```{.r .cell-code}\n# Pander table\n# install.packages(\"pander\") # install pander first\nlibrary(pander)\npander(head(mtcars, n = 4))\n```\n\n::: {.cell-output-display}\n-------------------------------------------------------------------------------\n       &nbsp;         mpg    cyl   disp   hp    drat    wt     qsec    vs   am \n-------------------- ------ ----- ------ ----- ------ ------- ------- ---- ----\n   **Mazda RX4**       21     6    160    110   3.9    2.62    16.46   0    1  \n\n **Mazda RX4 Wag**     21     6    160    110   3.9    2.875   17.02   0    1  \n\n   **Datsun 710**     22.8    4    108    93    3.85   2.32    18.61   1    1  \n\n **Hornet 4 Drive**   21.4    6    258    110   3.08   3.215   19.44   1    0  \n-------------------------------------------------------------------------------\n\nTable: Table continues below\n\n \n----------------------------------\n       &nbsp;         gear   carb \n-------------------- ------ ------\n   **Mazda RX4**       4      4   \n\n **Mazda RX4 Wag**     4      4   \n\n   **Datsun 710**      4      1   \n\n **Hornet 4 Drive**    3      1   \n----------------------------------\n:::\n:::\n\n\nZie ook hoe je mooie tabellen kunt maken hier[Kable](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html)\n\n## HTML Widgets  \n\nMet de uitgave van de nieuwe RMarkdown v2 is het makkelijker dan ooit tevoren om <a href=\"http://www.htmlwidgets.org/showcase_datatables.html\">HTML Widgets</a> te gebruiken.  Volg de link om uit te zoeken in welke widgets jij ge?nteresseerd bent!  \n\n\n## Spelling controleren  \n\nIn de spelling kunnen natuurlijk altijd fouten zitten en daarom kan het nodig zijn dat we onze spelling in het document willen controleren.  Er zijn twee manieren om de spelling te controleren:  \n\n1. Druk op de \"ABC check mark\" ![](Images/spell_check.png) links van de vergrootglasknop in RStudio.\n2. Gebruik de `aspell()` functie van het **utils** pakket.  Je kunt dan echter beter de code chunks overslaan.  De `aspell()` functie kan een filter functie overnemen om bepaalde regels in de files over te slaan en kan worden gebruikt met de `knit_filter()` die ontworpen is om de code chunks in een file over te slaan.  \n\n\n## Knitr Thema's\nHet knitr-syntax-thema kan worden aangepast of helemaal naar de hand worden gezet. Als je de standaardthema's niet wilt, gebruik dan het `knit_theme` om het te veranderen.  Er zijn **80 thema's** opgenomen binnen `knitr` en we kunnen de namen ervan zien door `knit_theme$get()`.\n\n\nHier is de link naar jouw favoriete thema <a href=\"http://animation.r-forge.r-project.org/knitr/\">80 knitr highlight themes</a>.\n\n\n## Inhoudsopgave  \n\nEen inhoudsopgave kan aan het gerenderd document worden toegevoegd door de `toc` optie in de YAML kop te gebruiken.\n\nOpties hierbij:  \n\n- `toc`:  of de inhoudsopgave moeten worden meegenomen:  \n    - `toc: true`: hier wordt de inhoudsopgave meegenomen  \n    - **Default:**`toc: false`:  Hier wordt de inhoudsopgave niet meegenomen  \n- `toc_depth:`:  Hoeveel niveau's moeten in de inhoudsopgave worden worden meegenomen?\n    - **Default:** `doc_depth: 3` zal koppen tot en met `###` meenemen.  \n- `number_sections:` Voegt sectienummers toe aan de koppen.  Bijvoorbeeld, dit document heeft `number_sections: true`  \n    - **Default:** `number_sections: false`  \n    - Opgelet: Met elk `#` zal er een decimaal punt worden toegevoegd aan alle koppen.  \n- `toc_float:`  \n    - 2 andere mogelijke parameters binnen `toc_float:`  \n        - `collapsed:` Controleert of de inhoudsopgave alleen aan het begin verschijnt. Het zal met de cursor erover verschijnen.  \n            - **Default:** `collapsed: TRUE`\n        - `smooth_scroll:` Controleert of de pagina scrolls werken wanneer op de onderdelen van de inhoudsopgave wordt geklikt.  \n            - **Default:** `smooth_scroll: true`      \n\n\nBijvoorbeeld:  \n\n```\noutput:\n  html_document:\n    toc: true\n    toc_depth: 2\n---\n```\n\n> **Uitdaging:**\n> Maak de YAML kop voor een HTML document die het volgende inhoudt:  \n\n> - Inhoudsopgave\n> - Laat de inhoudsopgave vloeien  \n> - Sectie koppen met twee hashtags (`##`)  \n> - Genummerde secties  \n> - Geen makkelijke scrolling\n\n## Thema's\n\nRMarkdown heeft verschillende opties voor de HTML documenten.  Enkele mogelijkheden waaruit kan worden gekozen, hier met de Engelse termen: \n\n- **theme**  \n- **highlight**  \n- **smart**  \n\n\nDe HTML output thema's komen van <a href=\"http://bootswatch.com/\">Bootswatch</a> library.  Valide **HTML themes** omvatten de volgende:    \n\n- `cerulean`, `cosmo`,`flatly`, `journal`, `readable`,`spacelab` en `united`.  \n    - Bijvoorbeeld, het thema van de pagina is `readable`.\n- Zet het op nul voor geen thema (in dit geval kun je de css parameter gebruiken om jouw eigen stijl te gebruiken).\n\n**Highlight** specificeert de wijze waarop de syntax stijl oplicht. Stijlen die mogelijk zijn omvatten de volgende:  \n\n- `default`, `espresso`, `haddock`, `kate`, `monochrome`, `pygments`, `tango`, `textmate` en `zenburn`.   \n- Ook hier, plaats nul om syntax oplichting te voorkomen.\n\n**Smart** indiceert of de typografisch correcte output wordt weergegeven, zet rechte aanhalingstekens om in gekru, --- rechte aanhalingstekens, -- om in gekrulde aanhalingstekens en ... in ellipsen. **Smart** is standaard ingesteld.\n\nBijvoorbeeld:\n\n```\n---\noutput:\n  html_document:\n    theme: slate\n    highlight: tango\n---\n```\n\nAls je wilt kun je ook jouw eigen stijl-thema produceren en gebruiken.  Als je dat zou doen, zou de  output sectie van jouw YAML kop er z'on beetje zo uitzien:  \n```\noutput:\n  html_document:\n    css: styles.css\n```\n\nAls je nog wat verder wilt gaan en jouw eigen thema wilt schrijven in aanvulling op het oplichten, zou de YAML kop er beetje zo uitzien: \n```\n---\noutput:\n  html_document:\n    theme: null\n    highlight: null\n    css: styles.css\n---\n```\n\n\n\nHier is een link naar <a href=\"http://rmarkdown.rstudio.com/html_document_format.html#appearance_and_style\">Pr?sance en Stijl</a> in de HTML output.\n\n\n\n\n\n# Bibliografie  \n\nHet is ook mogelijk om een bibliografie file in de YAML kop mee te nemen.  Bibliografie formats die door Pandoc gelezen kunnen worden zijn:  \n\n| Format | \tFile extension   |\n|-----+-------|\n| MODS  | \t.mods |\n| BibLaTeX  | .bib  |\n| BibTeX  | .bibtex  |\n| RIS  | .ris  |\n| EndNote  | .enl  |\n| EndNote XML  | .xml  |\n| ISI  | .wos  |\n| MEDLINE  | .medline  |\n| Copac  | \t.copac  |\n| JSON citeproc  | \t.json  |\n\nOm een bibliografie in RMarkdown te maken, zijn er twee files nodig:  \n\n1. Een bibliografie file met **informatie** over elke referentie.  \n2. Een citaat stijl taal (CSL) om het **format** de referentie te bepalen. \n\nEen voorbeeld YAML kop met een bibliografie en een citaat stijl taal (CSL) file is:\n\n```\noutput: html_document\nbibliography: bibliography.bib\ncsl: nature.csl\n```\n\nBekijk de erg behulpzame webpagina van het R Core team op <a href=\"http://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html\" target=\"_blank\">bibliographies and citations</a>.  \n\nAls je R pakketten wilt citeren, heeft **knitr** zelfs een functie die `write_bib()` heet en die `.bib` overzicht van R pakketten kan leveren. Het wordt zelfs in een file geschreven!  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_bib(file = \"r-packages.bib\") # will write all packages  \nwrite_bib(c(\"knitr\", \"ggplot2\"), file = \"r-packages2.bib\") # Only writes knitr and ggplot2 packages\n```\n:::\n\n\n\n\n## Plaatsen \n\nDe bibliografie wordt automatisch aan het einde van het document geplaatst. Daarom moet je jouw `.Rmd` document met `# Referenties` eindigen zodat de bibliografie naar de kop voor bibliografie komt.\n\n\n\n## Stylen  \n\n**Citation Sylte Language (CSL)** is een op XML-gebaseerde taal die het format van citaten en bibliografie?n vaststelt. Referentie management programma's zoals Zotero, Mendeley en Papers gebruiken allemaal CSL.\n\nZoek jouw favoriete tijdschrift en CSL in de <a href=\"https://www.zotero.org/styles\" target=\"_blank\">Zotero Style Repository</a>, waar nu meer dan 8,152 CSLs inzitten.  Is er een stijl waar je naar zoekt en die er niet in zit?   \n\n```\noutput: html_document\nbibliography: bibliography.bib\ncsl: nature.csl\n```\n\nIn de github repo voor deze workshop heb ik de `nature.csl` en `the-isme-journal.csl` toegevoegd om mee te spelen. Download anders een stijl van de Zotero Style Repository!\n\n\n## Citaten  \n\nCitaten gaan tussen vierkante haakjes `[ ]` en worden afgescheiden door punt-komma's' `;`. Elk citaat moet een sleutel hebben, samen de `@ + de citaat identificatie` van de database vormen en die optioneel a prefix, a locator en a suffix hebben.  Om te controleren wat de citaatsleutel is van een referentie, werp dan een blik op de `.bib` file.  Hier in die file, kun je de sleutel voor elke referentie veranderen.  Echter, wees er wel van bewust dat elke ID uniek is!   \n\n\nHier zijn wat voorbeelden met bijpassende code in het Engels:\n\n- Microbes control Earth's biogeochemical cycles  [@Falkowski2008].  \n    - Code:  `Microbes contorl Earth's biogeochemical cycles  [@Falkowski2008].`  \n- I love making beautiful plots with ggplot2 [@R-ggplot2]  \n    - Code: `I love making beautiful plots with ggplot2 [@R-ggplot2]`  \n- Dr. Yuhui Xie's book about Dynamic Documents [@Xie2015] inspired me to host this workshop.  \n    - Code:  `Dr. Yuhui Xie's book about Dynamic Documents [@Xie2015] inspired me to host this workshop.`  \n- A great article in *Science* regarding biogeography of microbes asks readers to imagine their Alice in Wonderland to shrink down to understand the microbial world [@Green2008].   \n    - Code: `A great article in *Science* regarding biogeography of microbes asks readers to imagine they are Alice in Wonderland to and shrink down to understand the microbial world [@Green2008].`\n\nHet is cool dat de enige refenties die aan het document worden toegevoegd degene zijn die jijzelf citeert!  \n\n\n# Publiceren via RPubs  \n\nAls je een keer een mooi dynamisch document hebt gemaakt wil je dat mogelijk delen met anderen.  Een mogelijkheid om het te delen met de wereld is om het te hosten op <a href=\"https://rpubs.com/\" target=\"_blank\">RPubs</a>.  Met RStudio kan dit heel makkelijk!  Doe het volgende:  \n\n1. Maak een aansprekend `.Rmd` document.  \n2. Klik op de knop om jouw gerenderd HTML document te puliceren.  \n3. In de rechter bovenhoek van het previewscherm klik je op de publiceerknop en volg je de aanwijzingen.  \n    - *Opgelet:*  Je moet een RPubs profiel hebben aangemaakt.  \n4. Als je het profiel hebt, let dan op het volgende:  \n    - De titel van het document.     \n    - Een beschrijving van het document.     \n    - De URL waar de website wordt gehost.  \n        - *Opgelet:*  Het begin van de URL zal zijn:  **www.rpubs.com/your_username/name_of_your_choice**  \n        \n## RPubs vernieuwen  \n\nAls je veranderingen in het document wilt aanbrengen is het makkelijk om de webpagina te vernieuwen.  Als je een keer jouw aangepaste documentg hebt gerenderd klik je op de ![](Images/republish.png) knop rechtsboven in de hoek van de preview scherm.  Het aangepaste document zal dezelfde URL hebben als het orginele document.  \n\n\n# Enkele RMarkdown-documenten\nNet als $\\Latex$ leent RMarkdown zich voor het opmaken van hele verschillende wetenschappelijke producten. Van een aantal belangrijke artikele heb ik wat voorbeelden gemaakt. Als basis heb ik een klein rapport van twee collega's van mij genomen. Voor mensen die hiermee willen werken, is er een syntax. Met behulp daarvan kun je het product makkelijk en eenvoudig maken.\n\n\n## Artikel \nIedereen die wel eens een wetenschappelijk artikel maakt, weet dat hij of zij soms tegen ingewikkelde zaken aanloopt. De consistente opbouw bijvoorbeeld, het toevoegen van een tabel of een figuur, de referenties goed plaatsen. Als je in Word werkt is het soms lastig als je van volgorde verandert. Bij RMarkdown kun je het pakket `rticles`binnenhalen. Dan krijg je enkele templates waaruit je een keuze kunt maken. Hier [JSS-voorbeeld](https://github.com/Jonkman1/RMarkdownproducts/blob/master/Artikel/DenHaagartikelEXAMPLE.pdf) het artikel voor Journal of Statistical Software.\n\n\n\n\n## Boek\nEen boek bestaat uit verschillende onderdelen, bijvoorbeeld uit een een inhoudsopgave, de hoofdstukken en de literatuur. Hier wordt een stramien voor de opbouw van een boek aangeboden dat eenvoudig is aan te passen. Van het rapprt heb ik een klein boekje gemaakt, dat vind je hier [DenHaagboekhtml](https://bookdown.org/connect/#/apps/2082/access)\n\n\nHet is dan ook makkelijk om van hetzelfde een eboek te maken. Dat eboek vind je hier [EboekDenHaag](https://github.com/Jonkman1/RMarkdownproducts/blob/master/Boek/_book/DenHaag.epub)\n\n\n## Rapport \nVan hetzelfde onderzoek heb ik ook een fraai vormgegeven rapport gemaakt in de Tufte-stijl. Dat staat hier [DenHaagRapport](http://rpubs.com/HarrieJonkman/443085)\n\n## Presentatie\nDe presentaties kunnen er ook net wat strakker uitzien. Hier geef ik twee voorbeelden\n[Beamer](https://github.com/Jonkman1/RMarkdownproducts/blob/master/Presentatie/DenHaagbeamer.pdf) en ook in een andere stijl kun je het zelf draaien\n[ioslides](https://github.com/Jonkman1/RMarkdownproducts/blob/master/Presentatie/DenHaagioslides.Rmd)\n\n \n\n## Een blog en website\nDit blog is met het pakket Radix gemaakt. Van Den Haag heb ik ook een blog gemaakt en dat vind je hier.[Blog](https://bookdown.org/connect/#/apps/2081/access)\n\n## Tutorial\nOver RMarkdown heb ik eerder deze tutorial van Schmidt bewerkt, zie [Dynamische documenten](http://rpubs.com/HarrieJonkman/443087)\n\n## Een dashboard\nEen dashboard is een fraaie manier om kort maar krachtig enkele resultaten te presenteren. Zie hier [Dashboard](http://rpubs.com/HarrieJonkman/443082)\n\n## Tot slot\nHartelijke dank Marian Schmidt voor het opzetten van de workshop RMarkdown waar ik heel veel van heb geleerd en in dit document gebruik van heb gemaakt. Hartelijk dank natuurlijk ook naar Yihui Xie die zoveel hieromtrent heeft ontwikkeld en dit in alle openbaarheid met anderen deelt.\n\n\n ",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"..\\..\\site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\r\n<link href=\"..\\..\\site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\r\n<script src=\"..\\..\\site_libs/datatables-binding-0.22/datatables.js\"></script>\r\n<script src=\"..\\..\\site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\r\n<link href=\"..\\..\\site_libs/dt-core-1.11.3/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\r\n<link href=\"..\\..\\site_libs/dt-core-1.11.3/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\r\n<script src=\"..\\..\\site_libs/dt-core-1.11.3/js/jquery.dataTables.min.js\"></script>\r\n<link href=\"..\\..\\site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"..\\..\\site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}