{
  "hash": "5c8c28687d85086cbcfa2c2670112336",
  "result": {
    "markdown": "---\ntitle: \"Kaarten maken met R\"\ndescription: |\n     Hieronder een korte introductie op hoe je kaarten maakt met R, met name met het pakket `sf`.\nauthor: \"Euginio Petrovich, bewerking Harrie Jonkman\"\ndate: \"2022-05-05\"\ncategories: [analyse]\nimage: \"DR2_map_Europe.png\"\n---\n\n\n\n\n![](DR2_map_Europe.png)\n\n## Inleiding\n\nHieronder een korte handleidingen die je leert om met R kaarten te maken. Euginio Petrovich schreef: [Drawing maps with R. A basic tutorial](https://dr2blog.hcommons.org/2020/03/23/drawing-maps-with-r-a-basic-tutorial/) in 2020. Hij laat je zien hoe je een kaart van Europa maakt met vooral de pakketten `sf`en `ggplot, hoe je geografische data combineert met een eenvoudige dataset en hoe je vervolgens deze kaart met deze gegevens verfijnt.Inderdaad een basishandleiding. Dank je Euginio.  \n\n## Met R kaarten tekenen. Een basishandleiding\nMet kaarten kun je op een krachtige wijze informatie visualiseren. Het plotten van gegevens op een kaart kan trends en patronen aan het licht brengen die moeilijk te zien zijn door alleen een spreadsheet te onderzoeken. Kaarten zijn ook zeer nuttig om informatie op een aantrekkelijke en makkelijkere manier over te brengen aan het publiek.\n\nIn deze korte handleiding leren we hoe we eenvoudige geografische kaarten kunnen genereren met R. In het bijzonder zullen we leren hoe we de volgende kaart van de DR2 leden in Europa kunnen maken:\n\n### Aan de slag\nR is een gratis en open-source software die vele oplossingen biedt voor het berekenen van gegevens en het produceren van visualisaties. Een groot voordeel van R is dat de basisfunctionaliteiten kunnen worden uitgebreid met andere pakketten die vrij beschikbaar zijn op CRAN, het Comprehensive R Archive Network. Bovendien is er een actieve R-gemeenschap over de hele wereld die de meeste codeervragen beantwoordt die je kunt hebben.\n\nDe pakketten die nodig zijn voor deze handleiding kunnen worden geïnstalleerd met:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(c(\"sf\", \"rnaturalearth\" , \"rnaturalearthdata\", \"rgeos\", \"ggspatial\", \"ggrepel\", \"tidyverse\"))\n\n# Ik heb een hekje geplaatst omdat ik deze pakketten al had binnengehaald. Heb je dat nog niet gedaan, dan moet je het hekje weghalen.\n```\n:::\n\n\nDe eerste vijf pakketten zijn specifiek ontwikkeld voor kaarten: `sf` wordt gebruikt om ruimtelijke gegevens te beheren, `rnaturalearth` en `rnaturalearthdata` bevatten informatie over alle landen van de wereld, alsook informatie die nodig is om die landen op een kaart uit te zetten, en `ggspatial` verbetert de visualisatie van ruimtelijke gegevens. `ggrepel` helpt ons bij het beheer van de labels op de kaart, terwijl `tidyverse` een set R-bibliotheken omvat die de standaard zijn geworden voor gegevensmanipulatie en -visualisatie.\n\nNa de installatie van de pakketten, moeten we ze laden:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"sf\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'sf' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.9.1, GDAL 3.2.1, PROJ 7.2.1; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\nlibrary(\"rnaturalearth\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'rnaturalearth' was built under R version 4.1.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(\"rnaturalearthdata\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'rnaturalearthdata' was built under R version 4.1.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(\"rgeos\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'rgeos' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: sp\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'sp' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nrgeos version: 0.5-9, (SVN revision 684)\n GEOS runtime version: 3.9.1-CAPI-1.14.2 \n Please note that rgeos will be retired by the end of 2023,\nplan transition to sf functions using GEOS at your earliest convenience.\n GEOS using OverlayNG\n Linking to sp version: 1.4-6 \n Polygon checking: TRUE \n```\n:::\n\n```{.r .cell-code}\nlibrary(\"ggspatial\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggspatial' was built under R version 4.1.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(\"ggrepel\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ggplot2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.1.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(\"tidyverse\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyverse' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching packages --------------------------------------- tidyverse 1.3.1 --\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nv tibble  3.1.7     v dplyr   1.0.9\nv tidyr   1.2.0     v stringr 1.4.1\nv readr   2.1.2     v forcats 0.5.1\nv purrr   0.3.4     \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tibble' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\n\nAlvorens de kaarten te maken, moeten we de geografische gegevens in R importeren. Wij hebben ze opgeslagen in DR2_data, het volgende dataframe.\n\nZoals je kunt zien, zijn steden de basiseenheid van dit dataframe. Voor elk van hen hebben we het land opgegeven, het aantal leden (Members), het label dat we op de kaart zullen weergeven (het bestaat uit de naam van de stad plus het aantal leden tussen haakjes), en de breedtegraad en lengtegraad.\n\nWe importeren het dataframe, dat is opgeslagen in een CSV bestand, in R met de functie read.csv. Aangezien we een header met de namen van de kolommen hebben gebruikt, zetten we het argument header op TRUE. We moeten ook specificeren dat het scheidingsteken tussen de kolommen de puntkomma is en dat het decimaal scheidingsteken de komma is (en niet de punt, omdat er een Italiaanse versie van Excel is gebruikt om het bestand te produceren).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDR2_data <- read.csv(file=\"Dr2.CSV\",\n    header=TRUE, \n    sep=\";\", \n    dec = \",\")\n```\n:::\n\n\n\nJe kunt de eerste records van het dataframe controleren met het commando head(DR2_data).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(DR2_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ï..ID      City     Country Members         Label      Lat      Lng\n1     1     Turin       Italy      14    Turin (14) 45.07049  7.68682\n2     2     Siena       Italy       2     Siena (2) 43.31822 11.33064\n3     3      Pisa       Italy       1      Pisa (1) 43.70853 10.40360\n4     4  Florence       Italy       1  Florence (1) 43.77925 11.24626\n5     5 Barcelona       Spain       1 Barcelona (1) 41.38879  2.15899\n6     6 Amsterdam Netherlands       1 Amsterdam (1) 52.37403  4.88969\n```\n:::\n:::\n\n\nWe zijn nu klaar om onze kaart te maken.\n\n### De wereldkaart maken\nDe eerste stap van onze kaartoefening is het creëren van een wereldkaart. Om dit te doen, gebruiken we de functie ne_countries om landengegevens op te halen uit `rnaturalearth`. We specificeren medium als `scale` en `sf` als `returnclass` van het dataframe, zodat de gegevens al in het juiste formaat zijn voor geografische kaarten maken.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworld <- ne_countries(scale = \"medium\", returnclass = \"sf\")\n```\n:::\n\n\n\nWij plotten deze gegevens met `ggplot2`, het `tidyverse`pakket voor visualisatie, en `sf`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = world) +\n       geom_sf()\n```\n\n::: {.cell-output-display}\n![](kaarten-maken-met-r_files/figure-html/wereldkaart-maken-1.png){width=672}\n:::\n:::\n\n\nWij zullen de wereldkaart gebruiken als basiskaart waarop wij de landen waar DR2-leden gevestigd zijn, zullen markeren.\n\nOm de DR2-landen op de kaart te markeren, moeten wij nu onze DR2-gegevens \"toevoegen\" aan het dataframe van de wereld. Wij doen dit met de functie left.join.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworld_joined <- left_join(world, DR2_data, by = c(\"name\" = \"Country\"))\n```\n:::\n\n\nDeze functie vertelt `R` dat het de DR2-data moet verbinden met de worlddata door te zoeken naar een overeenkomst op de naam van het land (we specificeren de overeenkomstige sleutel tussen de twee gegevenssets in het by argument). Wanneer een overeenkomst wordt gevonden, worden de records uit de twee tabellen gecombineerd. Wanneer geen overeenkomst wordt gevonden, zoals in het geval van Brazilië, wordt de waarde van de DR2-kolommen (bv. \"Leden\") van de niet-overeenkomende records op `NA` gezet, de standaardcode die door `R` wordt gebruikt voor ontbrekende waarden. Zo zal de record Brazilië `NA` krijgen als waarde van de kolom \"Members\". Het is belangrijk om alle landen in de wereld te behouden en niet alleen die met DR2-leden. Anders zullen wij, wanneer wij onze gegevens op de kaart uitzetten, alle landen zonder DR2 verliezen! Daarom hebben we de left.join gebruikt in plaats van de simple join: we willen dat R alle records in de \"linker\" dataset behoudt (d.w.z. degene die het eerste argument in de functie bevat).\n\nWij willen nu de landen met DR2 leden op de wereldkaart markeren. Om dit te doen gebruiken we een `if...else` in het `fill` argument. Indien de waarde van de kolom \"Members\" null is (d.w.z. gelijk aan NA), stellen wij de kleur van het land in op grijs. Indien de waarde niet nul is, d.w.z. indien er DR2 leden zijn in dat land, stellen we de kleur in op rood. Merk op dat we in het eerste geval de kleurnaam hebben gebruikt, terwijl we in het tweede geval de hexadecimale kleurcode hebben gebruikt die overeenkomt met de kleur van het DR2-logo. Het argument kleur specificeert de kleur van de grenzen van de landen.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n DR2_countries_map <- ggplot(data =  world_joined)+\n\tgeom_sf(fill = ifelse(is.na(world_joined$Members), \"lightgrey\", \"#c8242b\"), \n\tcolor = \"black\")\n```\n:::\n\n\nDe Europese landen waar DR2-leden gevestigd zijn, zijn te klein om op een wereldkaart op te vallen. De wereldschaal is dus niet erg effectief om de geografische spreiding van DR2 weer te geven. We moeten inzoomen op het niveau van Europa. Een zeer nuttig kenmerk van het `sf`-pakket is dat dit zeer gemakkelijk kan worden gedaan door een reeks coördinaten op te geven van het gebied waarin wij geïnteresseerd zijn:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDR2_countries_map +\n\tcoord_sf(xlim = c(-16.1, 32.88), \n\t\tylim = c(35, 60), \n\t\texpand = TRUE)\n```\n\n::: {.cell-output-display}\n![](kaarten-maken-met-r_files/figure-html/Europe-plotten-1.png){width=672}\n:::\n:::\n\n\n### Steden markeren (puntdata)\n\nWij weten dat DR2-leden niet alleen in bepaalde landen gevestigd zijn, maar ook in specifieke steden binnen die landen. In ons DR2-dataset hadden we de DR2-steden samen met hun geografische coördinaten. We willen deze steden nu als punten op onze kaart plaatsen.\n\nWe moeten eerst ons dataframe converteren naar een sf object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsf_DR2_cities <- st_as_sf(DR2_data, \n\tcoords = c(\"Lng\", \"Lat\"), \n\tremove = FALSE, \n\tcrs = 4326, \n\tagr = \"constant\")\n```\n:::\n\n\n\nMerk op dat we de kolommen moesten aanduiden waarin de geografische coördinaten van onze steden zijn opgeslagen, evenals andere parameters zoals de gebruikte geografische projectie (hier WGS84, wat de CRS-code #4326 is).\n\nWe kunnen nu de punten van de steden op de kaart plotten:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDR2_countries_map +\n\tgeom_sf(data = sf_DR2_cities)\n```\n\n::: {.cell-output-display}\n![](kaarten-maken-met-r_files/figure-html/steden-plotten-1.png){width=672}\n:::\n:::\n\n\nOm ze duidelijk te zien, laten we inzoomen op Europa, zoals we eerder hebben geleerd:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDR2_countries_map +\n\tgeom_sf(data = sf_DR2_cities) +\n\tcoord_sf(xlim = c(-16.1, 32.88), \n\t\tylim = c(35, 60), \n\t\texpand = TRUE)\n```\n\n::: {.cell-output-display}\n![](kaarten-maken-met-r_files/figure-html/inzoomen-Europa-1.png){width=672}\n:::\n:::\n\n\n### Labels toevoegen\nOm de interpretatie van onze kaart te vergemakkelijken, is het zeer nuttig om enkele labels toe te voegen. Wij willen bijvoorbeeld weten hoeveel DR2-leden gevestigd zijn in de steden die wij eerder hebben aangegeven. We hebben de tekst van de labels al in de kolom \"Label\" van het DR2-datasetje. Nu moeten we deze tekst op de kaart visualiseren. We doen dit door gebruik te maken van de functie `geom_label_repel`. Deze functie, die is opgenomen in het pakket `ggrepel`, verbetert de positionering van labels op een plot: ze stoot labels van elkaar af, weg van datapunten, en weg van de randen van het plotgebied.\n\nIn de parameter esthetica van de functie specificeren we dat we de etiketten op de kaart willen plaatsen op basis van de breedte- en lengtegraad van de steden, en dat hun tekst wordt aangegeven in de kolom \"Label\". De andere parameters specificeren de kleur van de labels, de grootte van de tekst, en de hoeveelheid \"afstotingskracht\" van het positioneringsalgoritme.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDR2_countries_map +\n\tgeom_sf(data = sf_DR2_cities) +\n\tgeom_label_repel(data = sf_DR2_cities, \n\t\taes(x = Lng, y = Lat, label = Label), \n\t\tcolor = \"black\", \n\t\tfontface = \"bold\", \n\t\tsize = 3, \n\t\tforce = 5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: ggrepel: 9 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n```\n:::\n\n::: {.cell-output-display}\n![](kaarten-maken-met-r_files/figure-html/labels-toevoegen-1.png){width=672}\n:::\n:::\n\n\nEr is echter een probleem. Als we inzoomen op Europa, vinden we een \"indringer\": het label \"Montreal (1)\" zou niet mogen verschijnen op de Europese kaart!\n\nOm dit probleempje op te lossen, moeten we de steden in landen buiten Europa uitfilteren. We maken dus een deelverzameling van het DR2-datasetje en specificeren dat we alle records willen behouden waarvan het land niet ( != ) Canada is:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDR2_european_cities <- subset(DR2_data, \n\t\t\tCountry != \"Canada\", \n\t\t\tselect = City:Lng)\n## Convert to the sf format\nsf_DR2_european_cities <- st_as_sf(DR2_european_cities, \n\tcoords = c(\"Lng\", \"Lat\"), \n\tremove = FALSE, \n\tcrs = 4326, \n\tagr = \"constant\")\n```\n:::\n\n\nAls we de nieuwe dataset op de Europese kaart uitzetten, ontdekken we dat de indringer is verwijderd:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDR2_countries_map +\n\tgeom_sf(data = sf_DR2_european_cities) +\n\tgeom_label_repel(data = sf_DR2_european_cities, \n\t\taes(x = Lng, y = Lat, label = Label), \n\t\tcolor = \"black\", \n\t\tfontface = \"bold\", \t\n\t\tsize = 3, \n\t\tforce = 5)+\n\tcoord_sf(xlim = c(-16.1, 32.88), \n\t\tylim = c(35, 60), \n\t\texpand = TRUE)\n```\n\n::: {.cell-output-display}\n![](kaarten-maken-met-r_files/figure-html/zonderCanada-plotten-1.png){width=672}\n:::\n:::\n\n\nHet is duidelijk dat er redenen kunnen zijn om het label Montreal te behouden: bijvoorbeeld om aan te tonen dat DR2 ook overzeese leden heeft.\n\n### Verbetering van de kaart\n\nIn de tot nu toe gegenereerde versies van de kaart wordt de informatie over het aantal leden van DR2 in de labels weergegeven, als een getal tussen haakjes. Is het mogelijk om dit als een visueel kenmerk weer te geven, zodat het meteen in het oog springt? Een eerste idee zou kunnen zijn om de grootte van de labels evenredig met het aantal leden te veranderen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDR2_countries_map +\n\tgeom_sf(data = sf_DR2_european_cities) +\n\tgeom_label_repel(data = sf_DR2_european_cities, \n\t\taes(x = Lng, y = Lat, label = Label, size = Members), \n\t\tcolor = \"black\", \n\t\tfontface = \"bold\", \t\n\t\tforce = 5)+\n\tcoord_sf(xlim = c(-16.1, 32.88), \n\t\tylim = c(35, 60), \n\t\texpand = TRUE)\n```\n\n::: {.cell-output-display}\n![](kaarten-maken-met-r_files/figure-html/evenredig-maken-1.png){width=672}\n:::\n:::\n\n\nHet resultaat is echter vrij slecht, vanwege het grote verschil in grootte tussen Turijn en de andere steden. Aangezien de meeste steden slechts één lid hebben, zijn hun labels te klein om leesbaar te zijn. Merk op dat `R` automatisch een legende toevoegt om de grootte van de labels te interpreteren.\n\nEen betere oplossing is om de grootte van de stadspunten evenredig te laten zijn met het aantal leden:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDR2_countries_map +\n\tgeom_sf(data = sf_DR2_european_cities, \n\t\taes(size = Members))+\n\tgeom_label_repel(data = sf_DR2_european_cities, \n\t\taes(x = Lng, y = Lat, label = Label), \n\t\tcolor = \"black\", \n\t\tfontface = \"bold\",\n\t\tsize = 3, \t\n\t\tforce = 9)+\n\tcoord_sf(xlim = c(-16.1, 32.88), \n\t\tylim = c(35, 60), \n\t\texpand = TRUE)\n```\n\n::: {.cell-output-display}\n![](kaarten-maken-met-r_files/figure-html/evenredig-maken2-1.png){width=672}\n:::\n:::\n\n\nMerk op dat R automatisch een legende creëert op basis van de grootte van de punten:\n\nOp dezelfde manier kunnen we ook de kleur van de punten gebruiken om het aantal leden weer te geven. We passen de kleurenschaal aan door het uiterste in te stellen op blauw en groen, zodat de grote steden in blauw en de kleine steden in groen worden gekleurd:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDR2_countries_map +\n\tgeom_sf(data = sf_DR2_european_cities, \n\t\taes(color = Members, size = Members))+\n\tscale_color_gradient(low = \"blue\", high = \"green\")+\n\tgeom_label_repel(data = sf_DR2_european_cities, \n\t\taes(x = Lng, y = Lat, label = Label), \n\t\tcolor = \"black\", \n\t\tfontface = \"bold\",\n\t\tsize = 3, \t\n\t\tforce = 9)+\n\tcoord_sf(xlim = c(-16.1, 32.88), \n\t\tylim = c(35, 60), \n\t\texpand = TRUE)\n```\n\n::: {.cell-output-display}\n![](kaarten-maken-met-r_files/figure-html/kleuren-gebruiken-1.png){width=672}\n:::\n:::\n\n\nMerk op dat `R` een tweede legende toevoegt om de kleur van de punten te interpreteren:\n\nDe laatste kaart lijkt me echter \"overbelast\". Dezelfde informatie (de DR2 leden) wordt op drie verschillende manieren gevisualiseerd: met een getal in het label, met de grootte van de punten, en met de kleur van de punten. Persoonlijk vind ik deze oplossing overbodig. Ik denk dat de tweede kaart het meest evenwichtig (en esthetisch het meest aangenaam) is.\n\n### Laatste accenten\nEen groot voordeel van `ggplot2` is dat het toelaat om bijna alle grafische aspecten van de visualisaties te controleren. Door de parameters in de thema-functie te wijzigen, kunnen we onze kaart verfijnen tot ze aan onze smaak beantwoordt. Om de uiteindelijke versie van de kaart te realiseren, veranderen we de kleur van de achtergrond van de kaart (dat is de oceaan) in lichtblauw, we verwijderen de titels van de assen, de teksten en de vinkjes en de legenda. Tenslotte voegen we een titel toe aan onze kaart.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEuropean_DR2_map2 <- DR2_countries_map +\n\tgeom_sf(data = sf_DR2_european_cities, \n\t\taes(size = Members))+\n\tgeom_label_repel(data = sf_DR2_european_cities, \n\t\taes(x = Lng, y = Lat, label = Label), \n\t\tcolor = \"black\", \n\t\tfontface = \"bold\",\n\t\tsize = 3, \t\n\t\tforce = 12)+\n\tcoord_sf(xlim = c(-16.1, 32.88), \n\t\tylim = c(35, 60), \n\t\texpand = TRUE)+\n\ttheme_minimal() +\n\ttheme(panel.background = element_rect(fill = \"aliceblue\"), \n\t\taxis.title.x = element_blank(), \n\t\taxis.title.y = element_blank(), \n\t\taxis.text.x = element_blank(),\n\t\taxis.text.y = element_blank(),\n\t\taxis.ticks = element_blank(),\n\t\tlegend.position = \"none\") +\n\tggtitle(\"Map of DR2 Members in Europe\")\n```\n:::\n\n\nDe laatste stap is het opslaan van de kaart in een geschikt formaat. We slaan zowel een PDF-versie van de kaart op, die de hoogste kwaliteit behoudt, als een lichtere PNG-versie:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"DR2_map_Europe.pdf\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 7 x 5 in image\n```\n:::\n\n```{.r .cell-code}\nggsave(\"DR2_map_Europe.png\", dpi = \"screen\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 7 x 5 in image\n```\n:::\n:::\n\n\n<center>\n![Zo ziet het eruit](DR2_map_Europe.png){\nwidth=150%}\n</center>\n\n### Verder lezen\nDeze korte handleiding is grotendeels geïnspireerd door de [tutorial](https://r-spatial.org/r/2018/10/25/ggplot2-sf.html) die Euginio gebruikte om de basis van mapping met R te leren. Hij legt heel duidelijk verschillende andere onderwerpen uit die met maps te maken hebben en hij raadt deze zeker aan. Een andere nuttige tutorial is voor hem [deze](https://www.r-bloggers.com/2017/02/how-to-make-a-global-map-in-r-step-by-step/), die uitlegt hoe je een ander R-pakket voor kaarten, ggmap, gebruikt en een aantal veelvoorkomende data wrangling operaties.\n",
    "supporting": [
      "kaarten-maken-met-r_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}